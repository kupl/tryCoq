Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), match (repr (tree1)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction tree1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), match (repr (tree1)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> induction tree1(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
Base1 : tree1 = Leaf (nat1)
---------------------------------------
match (repr (Leaf (nat1))) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (Leaf (nat1))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat1))) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
Base1 : tree1 = Leaf (nat1)
---------------------------------------
match (repr (Leaf (nat1))) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (Leaf (nat1))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat1))) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
match (repr (Node (nat1) (tree2) (tree3))) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
match (repr (Node (nat1) (tree2) (tree3))) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)(rank:4.)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)(rank:4.)
=================================================
Progress: 6


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)(rank:5.)
=================================================
Progress: 7


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)(rank:5.)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank:5.)
=================================================
Progress: 8


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
=================================================
Progress: 9


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
=================================================
Progress: 10


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)(rank:6.)
=================================================
Progress: 11


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case g (Tuple2 (nat1) (nat1)) (repr (tree2))(rank:6.)
case reprNew (tree2)(rank:6.)
=================================================
Progress: 12


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case g (Tuple2 (nat1) (nat1)) (repr (tree2))(rank:6.)
case reprNew (tree2)(rank:6.)
=================================================
Progress: 13


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case g (Tuple2 (nat1) (nat1)) (repr (tree2))(rank:6.)
case reprNew (tree2)(rank:6.)
=================================================
Progress: 14


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case g (Tuple2 (nat1) (nat1)) (repr (tree2))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:6.)
=================================================
Progress: 15


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case reprNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (nat2) (nat3)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : reprNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (nat2) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case reprNew (tree2)
parent
Tuple2 (nat2) (nat1)
lower
Tuple2(_, nat1)
upper
_
remove upper
Tuple2(_, _)
remove lower
Tuple2(_, _)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (nat2) (nat3)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : reprNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (nat2) (nat1)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 16


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (nat2) (nat3)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : reprNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (nat2) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 17


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5.)
=================================================
Progress: 18


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 19


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case g (Tuple2 (nat1) (nat1)) (repr (tree2))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:6.)
=================================================
Progress: 20


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case reprNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (nat2) (nat3)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (nat3) (nat1) = true
Case2 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : reprNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (nat2) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case reprNew (tree2)
parent
Tuple2 (nat2) (nat1)
lower
Tuple2(_, nat1)
upper
_
remove upper
Tuple2(_, _)
remove lower
Tuple2(_, _)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 21


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case g (Tuple2 (nat1) (nat1)) (repr (tree2))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:6.)
=================================================
Progress: 22


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case reprNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (nat2) (nat3)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : reprNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (nat2) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case reprNew (tree2)
parent
Tuple2 (nat2) (nat1)
lower
Tuple2(_, nat1)
upper
_
remove upper
Tuple2(_, _)
remove lower
Tuple2(_, _)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
remove upper
Tuple2(nat2, nat1)
remove lower
Tuple2(nat2, nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))))) = Tuple2 (ZERO) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (nat2) (nat3)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : reprNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (nat2) (nat1)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (nat2) (nat3)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : reprNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (nat2) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 24


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5.)
=================================================
Progress: 25


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 26


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case g (Tuple2 (nat1) (nat1)) (repr (tree2))
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: g (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
previous tactics
simpl in goal
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case g (Tuple2 (nat1) (nat1)) (repr (tree2))
parent
Tuple2 (nat2) (nat3)
lower
Tuple2(_, nat3)
upper
g(_, repr(tree3))
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 27


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 28


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 29


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5.)
=================================================
Progress: 30


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 31


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat3(rank:5.)
=================================================
Progress: 32


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat3(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 33


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
---------------------------------------
forall (tree1:tree), gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 34


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case g (Tuple2 (nat1) (nat1)) (repr (tree2))
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: g (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
previous tactics
simpl in goal
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case g (Tuple2 (nat1) (nat1)) (repr (tree2))
parent
Tuple2 (nat2) (nat3)
lower
Tuple2(_, nat3)
upper
g(_, repr(tree3))
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (SUCC (ZERO)) (ZERO)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 35


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 36


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 37


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5.)
=================================================
Progress: 38


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 39


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat3(rank:5.)
=================================================
Progress: 40


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat3(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 41


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case g (Tuple2 (nat1) (nat1)) (repr (tree2))
rewrite <- Case4 in goal at 0
validate generalize_common_subterm_goal
Prop: g (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) (repr (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))))) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
previous tactics
simpl in goal
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1)
case g (Tuple2 (nat1) (nat1)) (repr (tree2))
parent
Tuple2 (nat2) (nat3)
lower
Tuple2(_, nat3)
upper
g(_, repr(tree3))
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
remove upper
Tuple2(nat2, nat3)
remove lower
Tuple2(nat2, nat3)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (SUCC (ZERO)) (ZERO)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (SUCC (ZERO)) (ZERO)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO))))
Prop: g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 42


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (Tuple2 (nat2) (nat3)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 43


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) = true
Case4 : g (Tuple2 (nat1) (nat1)) (repr (tree2)) = Tuple2 (nat2) (nat3)
---------------------------------------
g (g (Tuple2 (nat1) (nat1)) (repr (tree2))) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 44


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5.)
=================================================
Progress: 45


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 46


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat3(rank:5.)
=================================================
Progress: 47


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat3(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 48


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
---------------------------------------
forall (tree1:tree), lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 49


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 50


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4))) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 51


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
---------------------------------------
forall (tree1:tree), gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
---------------------------------------
forall (tree1:tree), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 52


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 53


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4))) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 54


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 55


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4))) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 56


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
---------------------------------------
forall (tree1:tree), lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
---------------------------------------
forall (tree1:tree), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 57


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 58


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4))) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), gq (nat4) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (nat4) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 59


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
---------------------------------------
forall (tree1:tree), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
forall (tree1:tree), lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:6.)
=================================================
Progress: 60


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (nat2) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 61


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4))) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), lq (nat4) (nat1) = true->gq (nat4) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (nat4) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 62


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (nat2) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 63


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4))) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), lq (nat4) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat4) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (nat4) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 64


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
---------------------------------------
forall (tree1:tree), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
forall (tree1:tree), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:6.)
=================================================
Progress: 65


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
forall (tree1:tree), lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
forall (tree1:tree), Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 66


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
forall (tree1:tree), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
forall (tree1:tree), Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 67


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 68


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), gq (nat4) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (nat4) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
gq (nat4) (if gq (match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (match (reprNew (Leaf (nat5))) with
| Tuple2 _ b -> b) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (Leaf (nat5))) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 69


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (nat2) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 70


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), lq (nat4) (nat1) = true->gq (nat4) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (nat4) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
lq (nat4) (nat1) = true->gq (nat4) (if gq (match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat5))) with
| Tuple2 _ b -> b) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (Leaf (nat5))) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 71


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (nat2) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat2) (nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 72


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
---------------------------------------
forall (tree2:tree), lq (nat4) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat4) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (nat4) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
lq (nat4) (nat1) = true->lq (match (reprNew (Leaf (nat5))) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat4) (if gq (match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (Leaf (nat5))) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 73


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
forall (tree1:tree), Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 74


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
forall (tree1:tree), Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 75


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 76


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
gq (nat4) (if gq (match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (match (reprNew (Leaf (nat5))) with
| Tuple2 _ b -> b) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (Leaf (nat5))) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 77


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 78


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
lq (nat4) (nat1) = true->gq (nat4) (if gq (match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (Leaf (nat5))) with
| Tuple2 _ b -> b) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (Leaf (nat5))) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
lq (nat4) (nat1) = true->gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 79


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat2) (nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 80


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
lq (nat4) (nat1) = true->lq (match (reprNew (Leaf (nat5))) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat4) (if gq (match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (Leaf (nat5))) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
lq (nat4) (nat1) = true->lq (nat5) (nat1) = true->gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 81


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank:8.)
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)(rank:8.)
=================================================
Progress: 82


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank:8.)
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)(rank:8.)
=================================================
Progress: 83


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 84


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 85


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 86


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
lq (nat4) (nat1) = true->gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
---------------------------------------
gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 87


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 88


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
---------------------------------------
lq (nat4) (nat1) = true->lq (nat5) (nat1) = true->gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat5) (nat1) = true->gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 89


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 90


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 91


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 92


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
---------------------------------------
gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 93


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 94


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat5) (nat1) = true->gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
---------------------------------------
gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 95


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:8.)
rewrite Cond2 in goal at 2(rank:15.)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:8.)
rewrite Cond2 in goal at 0(rank:15.)
rewrite Cond2 in goal at 1(rank:15.)
=================================================
Progress: 96


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 97


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:8.)
rewrite Cond1 in goal at 2(rank:15.)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:8.)
rewrite Cond1 in goal at 0(rank:15.)
rewrite Cond1 in goal at 1(rank:15.)
=================================================
Progress: 98


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat5) (nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 99


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:8.)
rewrite Cond1 in goal at 2(rank:15.)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:8.)
rewrite Cond1 in goal at 0(rank:15.)
rewrite Cond1 in goal at 1(rank:15.)
=================================================
Progress: 100


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
---------------------------------------
gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true->Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 101


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat5) (nat2)(rank:8.)
case lq (nat5) (nat3)(rank:8.)
=================================================
Progress: 102


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat5) (nat2)(rank:8.)
case lq (nat5) (nat3)(rank:8.)
=================================================
Progress: 103


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3) -> Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat5) (nat2)(rank:8.)
case lq (nat5) (nat3)(rank:8.)
=================================================
Progress: 104


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)(rank:9.)
=================================================
Progress: 105


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank:9.)
case lq (nat4) (nat1)(rank:9.)
=================================================
Progress: 106


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)(rank:9.)
=================================================
Progress: 107


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank:9.)
case lq (nat4) (nat1)(rank:9.)
=================================================
Progress: 108


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:9.)
rewrite Cond2 in goal at 2(rank:16.)
rewrite Cond2 in goal at 0(rank:16.)
rewrite Cond2 in goal at 1(rank:16.)
=================================================
Progress: 109


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:9.)
rewrite Cond2 in goal at 0(rank:16.)
=================================================
Progress: 110


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:9.)
rewrite Cond1 in goal at 2(rank:16.)
rewrite Cond1 in goal at 0(rank:16.)
rewrite Cond1 in goal at 1(rank:16.)
=================================================
Progress: 111


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:9.)
rewrite Cond1 in goal at 0(rank:16.)
=================================================
Progress: 112


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:9.)
rewrite Cond1 in goal at 2(rank:16.)
rewrite Cond1 in goal at 0(rank:16.)
rewrite Cond1 in goal at 1(rank:16.)
=================================================
Progress: 113


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:9.)
rewrite Cond1 in goal at 0(rank:16.)
=================================================
Progress: 114


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat5) (nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat5) (nat3)(rank:9.)
=================================================
Progress: 115


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat5) (nat3)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (nat3) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat5) (nat2)(rank:9.)
=================================================
Progress: 116


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat5) (nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat5) (nat3)(rank:9.)
=================================================
Progress: 117


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat5) (nat3)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (nat3) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat5) (nat2)(rank:9.)
=================================================
Progress: 118


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat5) (nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat5) (nat3)(rank:9.)
=================================================
Progress: 119


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat5) (nat3)(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (nat3) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat5) (nat2)(rank:9.)
=================================================
Progress: 120


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat4) (nat1)(rank:10.)
=================================================
Progress: 121


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
Case2 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat4) (nat1)(rank:10.)
=================================================
Progress: 122


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat4) (nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank:10.)
=================================================
Progress: 123


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) then match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat4) (nat1)(rank:10.)
=================================================
Progress: 124


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
Case2 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat4) (nat1)(rank:10.)
=================================================
Progress: 125


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat4) (nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank:10.)
=================================================
Progress: 126


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9.)
=================================================
Progress: 127


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9.)
=================================================
Progress: 128


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9.)
=================================================
Progress: 129


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9.)
=================================================
Progress: 130


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9.)
=================================================
Progress: 131


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9.)
=================================================
Progress: 132


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat5) (nat3)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
case gq (nat5) (nat2)
case lq (nat5) (nat3)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 133


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 134


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 135


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 136


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat4(rank:7.)
=================================================
Progress: 137


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 138


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 139


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 140


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 141


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat4) (nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat4) (nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 142


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat4) (nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 143


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (nat3) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat5) (nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
Case2 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
case lq (nat5) (nat3)
case gq (nat5) (nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 144


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat5) (nat3)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
case gq (nat5) (nat2)
case lq (nat5) (nat3)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 145


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 146


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 147


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 148


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat4(rank:7.)
=================================================
Progress: 149


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 150


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 151


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 152


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 153


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat4) (nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat4) (nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 154


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat4) (nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 155


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (nat3) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat5) (nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat5) (nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
Case2 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
case lq (nat5) (nat3)
case gq (nat5) (nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 156


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (if lq (nat5) (nat3) then nat3 else nat5) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat5) (nat3)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
case gq (nat5) (nat2)
case lq (nat5) (nat3)
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 157


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : gq (nat5) (nat2) = true
Case2 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 158


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 159


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 160


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat4(rank:7.)
=================================================
Progress: 161


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 162


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 163


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 164


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 165


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 166


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 167


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat5) (nat2) then nat5 else nat2) (nat3) = Tuple2 (nat4) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat5) (nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->g (Tuple2 (nat1) (nat1)) (repr (tree1)) = Tuple2 (nat2) (nat3) -> g (Tuple2 (nat2) (nat3)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
tree1 : tree
nat4 : nat
Base1 : tree1 = Leaf (nat4)
tree2 : tree
nat5 : nat
Base2 : tree2 = Leaf (nat5)
Cond1 : lq (nat4) (nat1) = true
Cond2 : lq (nat5) (nat1) = true
Cond3 : gq (nat4) (if gq (nat5) (nat1) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : Tuple2 (if gq (nat4) (nat1) then nat4 else nat1) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat3)
Case1 : lq (nat5) (nat3) = true
Case2 : gq (nat5) (nat2) = true
---------------------------------------
Tuple2 (nat5) (nat3) = Tuple2 (nat4) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
case lq (nat5) (nat3)
case gq (nat5) (nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 168


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 169


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 170


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 171


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 172


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 173


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 174


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 175


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 176


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 177


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
rewrite Cond2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 178


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 179


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 180


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 181


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 182


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 183


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 184


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 185


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:7.)
=================================================
Progress: 186


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond5(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 187


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 188


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 189


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 190


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 191


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 192


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 193


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 194


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 195


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 196


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:7.)
=================================================
Progress: 197


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond5(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 198


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 199


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (ZERO) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 200


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 201


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 202


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 203


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 204


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 205


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 206


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 207


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:7.)
=================================================
Progress: 208


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond5(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 209


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 210


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 211


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 212


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 213


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 214


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 215


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 216


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 217


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 218


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:7.)
=================================================
Progress: 219


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond5(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 220


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 221


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 222


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 223


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 224


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 225


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 226


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 227


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 228


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 229


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:7.)
=================================================
Progress: 230


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond5(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 231


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 232


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 233


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 234


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 235


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 236


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 237


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 238


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 239


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 240


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:7.)
=================================================
Progress: 241


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond5(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 242


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 243


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 244


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 245


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 246


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 247


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 248


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 249


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 250


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 251


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 252


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 253


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 254


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 255


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 256


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 257


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 258


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 259


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 260


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 261


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 262


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 263


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 264


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 265


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 266


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 267


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 268


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 269


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 270


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 271


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 272


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 273


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 274


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 275


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 276


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 277


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 278


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 279


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 280


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 281


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 282


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 283


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 284


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 285


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 286


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 287


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 288


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 289


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 290


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 291


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 292


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 293


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 294


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 295


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 296


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 297


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat4) (nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
=================================================
Progress: 298


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat4) (nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat4) (nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 299


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat1) = true->lq (nat4) (nat1) = true->gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat4) (nat2) = true -> Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat4) (nat1) = true
Cond3 : gq (nat3) (if gq (nat4) (nat1) then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat4) (nat2) = true
---------------------------------------
Tuple2 (nat4) (nat2) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 300


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 301


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 302


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 303


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 304


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 305


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 306


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 307


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 308


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 309


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 310


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Cond5 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
=================================================
Progress: 311


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Cond5 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 312


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat4) (nat1)(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)
case lq (nat4) (nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 313


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 314


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 315


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 316


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 317


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 318


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 319


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 320


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 321


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 322


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 323


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 324


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 325


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 326


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 327


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
Case2 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat4) (nat1)(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (nat1) = true
Case2 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case3 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)
case lq (nat4) (nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 328


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat3) (nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (nat4) (nat1) = true
Case3 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)
case lq (nat4) (nat1)
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
asdf
=================================================
Progress: 329


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat4) (nat1)(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)
case lq (nat4) (nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 330


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case2 : lq (nat3) (nat1) = true
Case3 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 331


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 332


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 333


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 334


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 335


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 336


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 337


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 338


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 339


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 340


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 341


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 342


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 343


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
=================================================
Progress: 344


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = true
Case2 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat4) (nat1) then nat1 else nat4) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat4) (nat1)(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (nat1) = true
Case2 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
Case3 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)
case lq (nat4) (nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 345


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (nat4) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) then nat3 else match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat4)))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
tree2 : tree
nat3 : nat
Base1 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
tree1 : tree
nat4 : nat
Base2 : tree1 = Leaf (nat4)
Case1 : lq (nat3) (nat1) = true
Case2 : lq (nat4) (nat1) = true
Case3 : gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (nat3) (if lq (nat4) (nat1) then nat1 else nat4)
case lq (nat4) (nat1)
case gq (nat3) (if gq (nat4) (nat1) then nat4 else nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 346


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 347


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite Cond3 in goal at 0(rank:15.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 348


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 349


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:8.)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:8.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 350


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:9.)
rewrite Cond2 in goal at 0(rank:16.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 351


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:9.)
=================================================
Progress: 352


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond2 in goal at 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 353


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond2 in goal at 2
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
=================================================
Progress: 354


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 355


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite Cond3 in goal at 0(rank:15.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 356


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 357


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:8.)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:8.)
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 358


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:9.)
rewrite Cond1 in goal at 0(rank:16.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 359


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:9.)
=================================================
Progress: 360


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond1 in goal at 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
=================================================
Progress: 361


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond1 in goal at 2
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 362


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 363


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:15.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 364


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if true then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 365


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:8.)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:8.)
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
=================================================
Progress: 366


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:9.)
rewrite Cond1 in goal at 0(rank:16.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 367


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:9.)
=================================================
Progress: 368


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond1 in goal at 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 369


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond1 in goal at 2
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 370


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 371


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (if gq (ZERO) (if gq (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) then SUCC (SUCC (ZERO)) else SUCC (SUCC (ZERO))) then ZERO else if gq (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) then SUCC (SUCC (ZERO)) else SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (if gq (ZERO) (if gq (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (ZERO))) then SUCC (SUCC (SUCC (ZERO))) else SUCC (SUCC (ZERO))) then ZERO else if gq (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (ZERO))) then SUCC (SUCC (SUCC (ZERO))) else SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then ZERO else ZERO) then ZERO else if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 372


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 373


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->lq (nat2) (ZERO) = true->lq (nat3) (ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (ZERO) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 374


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->lq (nat2) (ZERO) = true->lq (nat3) (ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (ZERO) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (ZERO) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:9.)
=================================================
Progress: 375


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (ZERO) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (ZERO) then ZERO else ZERO) then nat3 else if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 376


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (ZERO) then ZERO else ZERO) then nat3 else if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 377


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:9.)
=================================================
Progress: 378


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 379


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 380


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (nat4) (nat5) = true->false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 381


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (nat4) (nat5) = true->false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
Cond1 : gq (nat4) (nat5) = true
---------------------------------------
false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 382


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (ZERO) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
Cond1 : gq (nat4) (nat5) = true
---------------------------------------
false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat2) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat2(rank:8.)
=================================================
Progress: 383


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat2) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (ZERO) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 384


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (ZERO) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (SUCC (nat5)) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 385


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (SUCC (nat5)) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:8.)
=================================================
Progress: 386


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 387


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (nat5) (nat4) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 388


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (nat5) (nat4) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
---------------------------------------
lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 389


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
---------------------------------------
lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:8.)
=================================================
Progress: 390


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8.)
=================================================
Progress: 391


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 392


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 393


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 394


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 395


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 396


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:8.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 397


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:11.)
=================================================
Progress: 398


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
=================================================
Progress: 399


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 400


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 401


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then ZERO else ZERO) then ZERO else if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then ZERO else ZERO) then ZERO else if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (if gq (SUCC (SUCC (ZERO))) (if gq (ZERO) (ZERO) then ZERO else ZERO) then SUCC (SUCC (ZERO)) else if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 402


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 403


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (ZERO) = true->gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->lq (nat3) (ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (ZERO) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 404


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (ZERO) = true->gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->lq (nat3) (ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (ZERO) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (SUCC (nat4)) = true->gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat2(rank:8.)
=================================================
Progress: 405


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (SUCC (nat4)) = true->gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), lq (ZERO) (SUCC (nat4)) = true->gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 406


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), lq (ZERO) (SUCC (nat4)) = true->gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), true = true->false = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:9.)
=================================================
Progress: 407


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), true = true->false = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
true = true->false = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 408


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
true = true->false = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
true = true->false = true->true = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 409


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
true = true->false = true->true = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
Cond1 : true = true
---------------------------------------
false = true->true = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 410


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
Cond1 : true = true
---------------------------------------
false = true->true = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->false = true->lq (nat5) (SUCC (nat4)) = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
true = true->false = true->lq (SUCC (nat5)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 411


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->false = true->lq (nat5) (SUCC (nat4)) = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
true = true->false = true->lq (SUCC (nat5)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->false = true->lq (nat5) (SUCC (nat4)) = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
true = true->false = true->lq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 412


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->false = true->lq (nat5) (SUCC (nat4)) = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
true = true->false = true->lq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->false = true->lq (nat5) (SUCC (nat4)) = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
Cond1 : true = true
---------------------------------------
false = true->lq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 413


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->false = true->lq (nat5) (SUCC (nat4)) = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
Cond1 : true = true
---------------------------------------
false = true->lq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), lq (SUCC (nat5)) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 414


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), lq (SUCC (nat5)) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:8.)
=================================================
Progress: 415


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 416


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
lq (nat5) (nat4) = true->gq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 417


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
lq (nat5) (nat4) = true->gq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
---------------------------------------
gq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 418


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
---------------------------------------
gq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (nat5) (nat4) = true
---------------------------------------
true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:8.)
=================================================
Progress: 419


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (nat5) (nat4) = true
---------------------------------------
true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:8.)
=================================================
Progress: 420


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 421


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 422


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 423


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 424


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 425


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:8.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 426


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:11.)
=================================================
Progress: 427


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
=================================================
Progress: 428


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 429


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 430


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (SUCC (ZERO)) then ZERO else SUCC (ZERO)) then ZERO else if gq (ZERO) (SUCC (ZERO)) then ZERO else SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (SUCC (ZERO)) then ZERO else SUCC (ZERO)) then ZERO else if gq (ZERO) (SUCC (ZERO)) then ZERO else SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (if gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then ZERO else ZERO) then SUCC (ZERO) else if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 431


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 432


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (ZERO) = true->lq (nat3) (ZERO) = true->gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (ZERO) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 433


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (ZERO) = true->lq (nat3) (ZERO) = true->gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (ZERO) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat2(rank:8.)
=================================================
Progress: 434


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), lq (ZERO) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 435


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), lq (ZERO) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), true = true->lq (nat3) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:9.)
=================================================
Progress: 436


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), true = true->lq (nat3) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
true = true->lq (ZERO) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 437


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
true = true->lq (ZERO) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
true = true->true = true->false = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 438


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
true = true->true = true->false = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
Cond1 : true = true
---------------------------------------
true = true->false = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 439


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
Cond1 : true = true
---------------------------------------
true = true->false = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
Cond1 : true = true
Cond2 : true = true
---------------------------------------
false = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 440


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
Cond1 : true = true
Cond2 : true = true
---------------------------------------
false = true -> Tuple2 (SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->lq (nat5) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
true = true->lq (SUCC (nat5)) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 441


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->lq (nat5) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
true = true->lq (SUCC (nat5)) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->lq (nat5) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
true = true->lq (nat5) (nat4) = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 442


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->lq (nat5) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
true = true->lq (nat5) (nat4) = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->lq (nat5) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
Cond1 : true = true
---------------------------------------
lq (nat5) (nat4) = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 443


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->lq (nat5) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
Cond1 : true = true
---------------------------------------
lq (nat5) (nat4) = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->lq (nat5) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
Cond1 : true = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 444


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH2 : true = true->lq (nat5) (SUCC (nat4)) = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))
Inductive2 : nat3 = SUCC (nat5)
Cond1 : true = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), lq (SUCC (nat5)) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 445


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), lq (SUCC (nat5)) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), lq (nat5) (nat4) = true->lq (nat3) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:8.)
=================================================
Progress: 446


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), lq (nat5) (nat4) = true->lq (nat3) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
lq (nat5) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 447


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
lq (nat5) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
lq (nat5) (nat4) = true->true = true->gq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 448


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
lq (nat5) (nat4) = true->true = true->gq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
---------------------------------------
true = true->gq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 449


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
---------------------------------------
true = true->gq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : true = true
---------------------------------------
gq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:8.)
=================================================
Progress: 450


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : true = true
---------------------------------------
gq (nat5) (nat4) = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : true = true
Cond3 : gq (nat5) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:8.)
=================================================
Progress: 451


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : true = true
Cond3 : gq (nat5) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : true = true
Cond3 : gq (nat5) (nat4) = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 452


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : lq (nat5) (nat4) = true
Cond2 : true = true
Cond3 : gq (nat5) (nat4) = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
lq (nat5) (nat4) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 453


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
lq (nat5) (nat4) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 454


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
---------------------------------------
lq (nat6) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 455


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
---------------------------------------
lq (nat6) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 456


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:8.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 457


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:11.)
=================================================
Progress: 458


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
=================================================
Progress: 459


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 460


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 461


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 462


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 463


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 464


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 465


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 466


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 467


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 468


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 469


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
nat1 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
asdf
=================================================
Progress: 470


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 471


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 472


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 473


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 474


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 475


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
asdf
=================================================
Progress: 476


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 477


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 478


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 479


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 480


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 481


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 482


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 483


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 484


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 485


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 486


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 487


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 488


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 489


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 490


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 491


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 492


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 493


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 494


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 495


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 496


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
nat1 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
asdf
=================================================
Progress: 497


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 498


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 499


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 500


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 501


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 502


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
asdf
=================================================
Progress: 503


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 504


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite Cond3 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:24.)
=================================================
Progress: 505


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 506


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 507


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 508


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 509


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite Cond3 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:24.)
=================================================
Progress: 510


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 511


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 512


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 513


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 514


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:24.)
=================================================
Progress: 515


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 516


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 517


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 518


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 519


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite Cond3 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:24.)
=================================================
Progress: 520


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 521


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite Cond3 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:24.)
=================================================
Progress: 522


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 523


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if true then nat1 else nat2) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite Cond2 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:24.)
=================================================
Progress: 524


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 525


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 526


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 527


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 528


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 529


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 530


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 531


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 532


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 533


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 534


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 535


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 536


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 537


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 538


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 539


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 540


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 541


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 542


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 543


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 544


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 545


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 546


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 547


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 548


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 549


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 550


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 551


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 552


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 553


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 554


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 555


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 556


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 557


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 558


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 559


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 560


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 561


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 562


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 563


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 564


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 565


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 566


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 567


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 568


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 569


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 570


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 571


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 572


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 573


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 574


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 575


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 576


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 577


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
---------------------------------------
gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond4 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 578


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 579


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond2 in goal at 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond2 in goal at 0
simpl in goal
rewrite Cond3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 580


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 581


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond1 in goal at 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 582


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 583


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat2) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond1 in goal at 2
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond1 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 584


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
=================================================
Progress: 585


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
=================================================
Progress: 586


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
=================================================
Progress: 587


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 588


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 589


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))
=================================================
Progress: 590


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
asdf
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 591


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 592


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 593


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 594


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 595


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 596


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 597


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 598


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 599


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 600


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 601


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
=================================================
Progress: 602


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
=================================================
Progress: 603


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
=================================================
Progress: 604


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 605


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 606


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 607


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 608


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 609


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 610


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 611


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 612


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 613


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 614


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 615


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 616


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
nat1 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
asdf
=================================================
Progress: 617


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 618


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 619


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 620


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 621


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 622


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
asdf
=================================================
Progress: 623


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
=================================================
Progress: 624


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
=================================================
Progress: 625


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
=================================================
Progress: 626


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 627


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:15.)
=================================================
Progress: 628


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
asdf
=================================================
Progress: 629


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 630


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 631


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 632


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 633


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 634


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 635


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 636


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 637


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 638


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 639


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 640


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat4) (nat2) = true
Cond3 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro nat1(rank:11.)
intro nat2(rank:11.)
intro nat3(rank:11.)
=================================================
Progress: 641


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat2(rank:11.)
intro nat3(rank:11.)
=================================================
Progress: 642


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 643


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat3 : nat
---------------------------------------
forall (nat1:nat) (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
asdf
=================================================
Progress: 644


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 645


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat3 : nat
---------------------------------------
forall (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
asdf
=================================================
Progress: 646


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 647


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 648


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
intro nat1(rank:13.)
intro nat2(rank:13.)
intro nat3(rank:13.)
=================================================
Progress: 649


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
intro nat2(rank:13.)
intro nat3(rank:13.)
=================================================
Progress: 650


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro nat3(rank:13.)
=================================================
Progress: 651


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat3(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat3 : nat
---------------------------------------
forall (nat1:nat) (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 652


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro nat3(rank:13.)
=================================================
Progress: 653


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat3(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat3 : nat
---------------------------------------
forall (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 654


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat3(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 655


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro nat3(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 656


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 22.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (SUCC (ZERO)) then SUCC (SUCC (ZERO)) else ZERO) then ZERO else if gq (SUCC (SUCC (ZERO))) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) then ZERO else if gq (SUCC (SUCC (ZERO))) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else SUCC (ZERO)) then ZERO else if gq (SUCC (ZERO)) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (SUCC (SUCC (ZERO))) then SUCC (SUCC (ZERO)) else ZERO) then ZERO else if gq (SUCC (SUCC (ZERO))) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 657


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 658


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 659


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 660


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 661


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 662


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 663


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 664


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 665


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 666


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 667


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->lq (nat3) (ZERO) = true->lq (nat4) (ZERO) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 668


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->lq (nat3) (ZERO) = true->lq (nat4) (ZERO) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat3(rank:11.)
=================================================
Progress: 669


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (ZERO) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 670


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (ZERO) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat4) (ZERO) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:12.)
=================================================
Progress: 671


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat4) (ZERO) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
Base3 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (ZERO) (ZERO) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 672


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
Base3 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (ZERO) (ZERO) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
nat5 : nat
IH1 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat5) (ZERO) = true -> Tuple2 (SUCC (nat5)) (nat1) = Tuple2 (if gq (nat5) (nat1) then nat5 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive1 : nat4 = SUCC (nat5)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat5))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat5)) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat5))) (nat1) = Tuple2 (if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 673


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
nat5 : nat
IH1 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat5) (ZERO) = true -> Tuple2 (SUCC (nat5)) (nat1) = Tuple2 (if gq (nat5) (nat1) then nat5 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive1 : nat4 = SUCC (nat5)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat5))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat5)) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat5))) (nat1) = Tuple2 (if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else nat1) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 674


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else nat1) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (SUCC (SUCC (nat5))) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:11.)
=================================================
Progress: 675


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (SUCC (SUCC (nat5))) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (SUCC (SUCC (nat5))) then ZERO else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 676


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (SUCC (SUCC (nat5))) then ZERO else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->false = true->false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 677


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->false = true->false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), false = true->false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 678


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), false = true->false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (SUCC (nat6)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (SUCC (SUCC (nat5))) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 679


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (SUCC (nat6)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (SUCC (SUCC (nat5))) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (nat5) (nat6) = true->false = true->false = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 680


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (nat5) (nat6) = true->false = true->false = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (nat5) (nat6) = true
---------------------------------------
forall (nat1:nat), false = true->false = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 681


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (nat5) (nat6) = true
---------------------------------------
forall (nat1:nat), false = true->false = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat3) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat3(rank:10.)
=================================================
Progress: 682


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat3) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (ZERO) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 683


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (ZERO) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat4) (SUCC (nat5)) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:11.)
=================================================
Progress: 684


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat4) (SUCC (nat5)) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (ZERO) (SUCC (nat5)) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 685


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (ZERO) (SUCC (nat5)) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat6)) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (SUCC (nat6)) (SUCC (nat5)) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 686


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat6)) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (SUCC (nat6)) (SUCC (nat5)) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 687


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
---------------------------------------
forall (nat1:nat), true = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 688


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
---------------------------------------
forall (nat1:nat), true = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
---------------------------------------
forall (nat1:nat), lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:10.)
=================================================
Progress: 689


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
---------------------------------------
forall (nat1:nat), lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:10.)
=================================================
Progress: 690


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 691


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (SUCC (nat6)) (ZERO) then SUCC (nat6) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 692


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (SUCC (nat6)) (ZERO) then SUCC (nat6) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (SUCC (nat6)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:15.)
=================================================
Progress: 693


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (SUCC (nat6)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (nat6) (ZERO) then nat6 else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case gq (nat6) (ZERO)(rank:16.)
=================================================
Progress: 694


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (nat6) (ZERO) then nat6 else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

6 goal(s) more...

3 conjecture(s) more...
>>> case gq (nat6) (ZERO)(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
Case1 : gq (nat6) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (nat6) (ZERO)

7 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case gq (nat6) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
Case1 : gq (nat6) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (nat6) (ZERO)

7 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 695


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
Case1 : gq (nat6) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (nat6) (ZERO)

7 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)(rank : 0.)


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 696


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
---------------------------------------
true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 697


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
---------------------------------------
true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
Cond1 : true = true
---------------------------------------
gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 698


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
Cond1 : true = true
---------------------------------------
gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
Cond1 : true = true
Cond2 : gq (nat1) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
asdf
=================================================
Progress: 699


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 22.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:15.)
=================================================
Progress: 700


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 701


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

11 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
=================================================
Progress: 702


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 22.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (ZERO))) = Tuple2 (if gq (SUCC (SUCC (ZERO))) (if gq (ZERO) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (SUCC (ZERO))) then SUCC (SUCC (ZERO)) else if gq (SUCC (ZERO)) (SUCC (SUCC (ZERO))) then SUCC (ZERO) else SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (SUCC (ZERO)) then SUCC (SUCC (ZERO)) else ZERO) then ZERO else if gq (SUCC (SUCC (ZERO))) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (if gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (SUCC (ZERO))) then SUCC (ZERO) else if gq (SUCC (ZERO)) (SUCC (SUCC (ZERO))) then SUCC (ZERO) else SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 703


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 704


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 705


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 706


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 707


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 708


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 709


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 710


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 711


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 712


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
asdf
=================================================
Progress: 713


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (ZERO) = true->gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->lq (nat4) (ZERO) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 714


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (ZERO) = true->gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->lq (nat4) (ZERO) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (SUCC (nat5)) = true->gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat3(rank:10.)
=================================================
Progress: 715


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (SUCC (nat5)) = true->gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), lq (ZERO) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 716


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), lq (ZERO) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), true = true->gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (nat5)) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:11.)
=================================================
Progress: 717


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), true = true->gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (nat5)) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (ZERO) (SUCC (nat5)) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 718


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (ZERO) (SUCC (nat5)) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->false = true->true = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 719


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->false = true->true = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), false = true->true = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 720


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), false = true->true = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (SUCC (nat6)) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (SUCC (nat6)) (SUCC (nat5)) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 721


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (SUCC (nat6)) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (SUCC (nat6)) (SUCC (nat5)) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 722


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 723


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
---------------------------------------
forall (nat1:nat), lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:10.)
=================================================
Progress: 724


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
---------------------------------------
forall (nat1:nat), lq (nat6) (nat5) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:10.)
=================================================
Progress: 725


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 726


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (SUCC (nat6)) (ZERO) then SUCC (nat6) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 727


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (SUCC (nat6)) (ZERO) then SUCC (nat6) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (SUCC (nat6)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:15.)
=================================================
Progress: 728


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (SUCC (nat6)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (nat6) (ZERO) then nat6 else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case gq (nat6) (ZERO)(rank:16.)
=================================================
Progress: 729


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (nat6) (ZERO) then nat6 else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

6 goal(s) more...

3 conjecture(s) more...
>>> case gq (nat6) (ZERO)(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
Case1 : gq (nat6) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (nat6) (ZERO)

7 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case gq (nat6) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
asdf
=================================================
Progress: 730


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 22.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:15.)
=================================================
Progress: 731


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 732


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

11 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
=================================================
Progress: 733


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 22.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (if gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (ZERO)) then SUCC (ZERO) else if gq (SUCC (ZERO)) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (if gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then SUCC (ZERO) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (SUCC (ZERO)) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) then ZERO else if gq (SUCC (SUCC (ZERO))) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else SUCC (SUCC (SUCC (ZERO)))) then ZERO else if gq (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) then SUCC (ZERO) else SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 734


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 735


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro nat1(rank:9.)
intro nat2(rank:9.)
intro nat3(rank:9.)
=================================================
Progress: 736


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro nat2(rank:9.)
intro nat3(rank:9.)
=================================================
Progress: 737


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 738


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat3 : nat
---------------------------------------
forall (nat1:nat) (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))
asdf
=================================================
Progress: 739


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 740


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat3 : nat
---------------------------------------
forall (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 741


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
asdf
=================================================
Progress: 742


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
=================================================
Progress: 743


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (ZERO) = true->lq (nat4) (ZERO) = true->gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 744


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (ZERO) = true->lq (nat4) (ZERO) = true->gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat3(rank:10.)
=================================================
Progress: 745


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), lq (ZERO) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 746


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), lq (ZERO) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), true = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:11.)
=================================================
Progress: 747


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), true = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->lq (ZERO) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 748


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->lq (ZERO) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->true = true->false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 749


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->true = true->false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), true = true->false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 750


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), true = true->false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
Cond2 : true = true
---------------------------------------
forall (nat1:nat), false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 751


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
Cond2 : true = true
---------------------------------------
forall (nat1:nat), false = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), true = true->lq (SUCC (nat6)) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (SUCC (nat6)) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 752


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), true = true->lq (SUCC (nat6)) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (SUCC (nat6)) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), true = true->lq (nat6) (nat5) = true->gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 753


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), true = true->lq (nat6) (nat5) = true->gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
---------------------------------------
forall (nat1:nat), lq (nat6) (nat5) = true->gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 754


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
---------------------------------------
forall (nat1:nat), lq (nat6) (nat5) = true->gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:10.)
=================================================
Progress: 755


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
---------------------------------------
forall (nat1:nat), gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:10.)
=================================================
Progress: 756


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
---------------------------------------
forall (nat1:nat), gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 757


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (SUCC (nat6)) (ZERO) then SUCC (nat6) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 758


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (SUCC (nat6)) (ZERO) then SUCC (nat6) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (SUCC (nat6)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:15.)
=================================================
Progress: 759


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (SUCC (nat6)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (nat6) (ZERO) then nat6 else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case gq (nat6) (ZERO)(rank:16.)
=================================================
Progress: 760


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (nat6) (ZERO) then nat6 else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

6 goal(s) more...

3 conjecture(s) more...
>>> case gq (nat6) (ZERO)(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), true = true->lq (nat6) (SUCC (nat5)) = true->gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : true = true
Cond2 : lq (nat6) (nat5) = true
Cond3 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond4 : gq (nat6) (nat5) = true
nat1 : nat
Base2 : nat1 = ZERO
Case1 : gq (nat6) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (nat6) (ZERO)

7 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case gq (nat6) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 761


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 22.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:15.)
=================================================
Progress: 762


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 763


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat2) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (nat1) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), lq (nat2) (nat4) = true->lq (nat3) (nat4) = true->gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (nat4) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true->gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true->gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : lq (nat5) (nat4) = true
Cond2 : lq (nat6) (nat4) = true
Cond3 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

11 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
=================================================
Progress: 764


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 23.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank:8.)
=================================================
Progress: 765


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:16.)
rewrite Cond3 in goal at 0(rank:16.)
=================================================
Progress: 766


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite Cond3 in goal at 0(rank:16.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
=================================================
Progress: 767


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 768


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8.)
=================================================
Progress: 769


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 770


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond2 in goal at 0
simpl in goal
rewrite <- Cond1 in goal at 0
case gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1)
rewrite Cond3 in goal at 0
simpl in goal
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
=================================================
Progress: 771


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
Case1 : gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) = true
---------------------------------------
Tuple2 (nat3) (if true then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 2(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 1(rank:24.)
rewrite <- Cond2 in goal at 2(rank:24.)
rewrite <- Case1 in goal at 1(rank:24.)
=================================================
Progress: 772


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 23.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond2 in goal at 0
simpl in goal
rewrite <- Cond2 in goal at 0
validate generalize_common_subterm_goal
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then ZERO else ZERO) then ZERO else if gq (ZERO) (ZERO) then ZERO else ZERO) (if lq (ZERO) (ZERO) then if lq (ZERO) (ZERO) then ZERO else ZERO else ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then ZERO else ZERO) then ZERO else if gq (ZERO) (ZERO) then ZERO else ZERO) (if lq (ZERO) (ZERO) then if lq (ZERO) (ZERO) then ZERO else ZERO else ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then ZERO else ZERO) then ZERO else if gq (ZERO) (ZERO) then ZERO else ZERO) (if lq (ZERO) (ZERO) then if lq (ZERO) (ZERO) then ZERO else ZERO else ZERO) = Tuple2 (ZERO) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) then SUCC (ZERO) else SUCC (SUCC (SUCC (ZERO)))) then ZERO else if gq (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) then SUCC (ZERO) else SUCC (SUCC (SUCC (ZERO)))) (if lq (ZERO) (SUCC (SUCC (SUCC (ZERO)))) then if true then SUCC (SUCC (SUCC (ZERO))) else SUCC (ZERO) else ZERO) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (ZERO)) then ZERO else if gq (SUCC (ZERO)) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (ZERO)) (if lq (ZERO) (SUCC (ZERO)) then if true then SUCC (ZERO) else SUCC (ZERO) else ZERO) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then ZERO else ZERO) then ZERO else if gq (ZERO) (ZERO) then ZERO else ZERO) (if lq (ZERO) (ZERO) then if true then ZERO else ZERO else ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 773


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 774


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (g (Tuple2 (nat1) (nat1)) (repr (tree1))) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 775


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->lq (nat2) (ZERO) = true->lq (nat3) (ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (ZERO) then if true then ZERO else nat2 else nat3) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 776


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->lq (nat2) (ZERO) = true->lq (nat3) (ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (ZERO) then if lq (nat2) (ZERO) then ZERO else nat2 else nat3) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 777


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->lq (nat2) (ZERO) = true->lq (nat3) (ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (ZERO) then if true then ZERO else nat2 else nat3) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (nat3) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:9.)
=================================================
Progress: 778


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->lq (nat2) (ZERO) = true->lq (nat3) (ZERO) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (ZERO) then if lq (nat2) (ZERO) then ZERO else nat2 else nat3) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (nat3) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:9.)
=================================================
Progress: 779


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (nat3) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (ZERO) then ZERO else ZERO) then nat3 else if gq (ZERO) (ZERO) then ZERO else ZERO) (nat3) = Tuple2 (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 780


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (ZERO) then ZERO else ZERO) then nat3 else if gq (ZERO) (ZERO) then ZERO else ZERO) (nat3) = Tuple2 (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat3) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 781


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat3) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat3) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:9.)
=================================================
Progress: 782


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (nat3) = Tuple2 (nat2) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (ZERO) then ZERO else ZERO) then nat3 else if gq (ZERO) (ZERO) then ZERO else ZERO) (nat3) = Tuple2 (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8.)
=================================================
Progress: 783


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (ZERO) then ZERO else ZERO) then nat3 else if gq (ZERO) (ZERO) then ZERO else ZERO) (nat3) = Tuple2 (ZERO) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat3) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 784


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat3) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat3) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:9.)
=================================================
Progress: 785


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat3) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 786


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 787


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (nat4) (nat5) = true->false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 788


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (nat4) (nat5) = true->false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
Cond1 : gq (nat4) (nat5) = true
---------------------------------------
false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 789


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
Cond1 : gq (nat4) (nat5) = true
---------------------------------------
false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat2) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat2 else nat3) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat2(rank:8.)
=================================================
Progress: 790


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat2) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat2 else nat3) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (ZERO) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else ZERO else nat3) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 791


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (ZERO) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else ZERO else nat3) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (SUCC (nat5)) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat3) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 792


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (SUCC (nat5)) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat3) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat3) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:8.)
=================================================
Progress: 793


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat3) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (ZERO) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else ZERO) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 794


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (ZERO) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else ZERO) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (nat5) (nat4) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 795


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (nat5) (nat4) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
---------------------------------------
lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 796


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
---------------------------------------
lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:8.)
=================================================
Progress: 797


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:8.)
=================================================
Progress: 798


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 799


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (SUCC (nat6)) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 800


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (SUCC (nat6)) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 801


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 802


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 803


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:8.)
rewrite Cond3 in goal at 0(rank:15.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:23.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 804


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond3 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite <- Cond2 in goal at 0(rank:24.)
rewrite <- Cond3 in goal at 0(rank:24.)
rewrite <- IH3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:24.)
=================================================
Progress: 805


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat4)) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (SUCC (nat4)) then nat3 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat3) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 806


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (ZERO) (SUCC (nat4)) then ZERO else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (ZERO) = Tuple2 (SUCC (nat4)) (ZERO)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 807


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (nat4) (nat5) = true->false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 808


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
---------------------------------------
gq (nat4) (nat5) = true->false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
Cond1 : gq (nat4) (nat5) = true
---------------------------------------
false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 809


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
Base1 : nat1 = ZERO
nat2 : nat
nat4 : nat
IH1 : forall (nat3:nat), gq (nat4) (if gq (nat3) (ZERO) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat4) (ZERO) then nat4 else ZERO) then nat3 else if gq (nat4) (ZERO) then nat4 else ZERO) (nat3) = Tuple2 (nat4) (ZERO)
Inductive1 : nat2 = SUCC (nat4)
nat3 : nat
nat5 : nat
IH2 : gq (SUCC (nat4)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (nat5))) with
| Tuple2 a _ -> a else ZERO) = true->false = true->false = true -> Tuple2 (if gq (nat5) (SUCC (nat4)) then nat5 else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (nat5) = Tuple2 (SUCC (nat4)) (ZERO)
Inductive2 : nat3 = SUCC (nat5)
Cond1 : gq (nat4) (nat5) = true
---------------------------------------
false = true->false = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else if gq (SUCC (nat4)) (ZERO) then SUCC (nat4) else ZERO) (SUCC (nat5)) = Tuple2 (SUCC (nat4)) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat2) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat2) (SUCC (nat4)) then SUCC (nat4) else nat2 else nat3) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat2(rank:8.)
=================================================
Progress: 810


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat2) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) then nat3 else if gq (nat2) (SUCC (nat4)) then nat2 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat2) (SUCC (nat4)) then SUCC (nat4) else nat2 else nat3) = Tuple2 (nat2) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (ZERO) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (ZERO) (SUCC (nat4)) then SUCC (nat4) else ZERO else nat3) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 811


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat3:nat), gq (ZERO) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (ZERO) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) then nat3 else if gq (ZERO) (SUCC (nat4)) then ZERO else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (ZERO) (SUCC (nat4)) then SUCC (nat4) else ZERO else nat3) = Tuple2 (ZERO) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (SUCC (nat5)) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat3) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 812


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (SUCC (nat5)) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat3) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat3) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:8.)
=================================================
Progress: 813


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat3:nat), gq (SUCC (nat5)) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat3 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat3) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (ZERO) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else ZERO) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 814


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (SUCC (nat5)) (if gq (ZERO) (SUCC (nat4)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (ZERO) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then ZERO else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (ZERO) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else ZERO) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (nat5) (nat4) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 815


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
gq (nat5) (nat4) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
---------------------------------------
lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:8.)
=================================================
Progress: 816


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
---------------------------------------
lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:8.)
=================================================
Progress: 817


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
true = true -> Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:16.)
rewrite Cond2 in goal at 0(rank:16.)
=================================================
Progress: 818


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 819


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:10.)
=================================================
Progress: 820


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case lq (nat6) (SUCC (nat4))(rank:11.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:26.)
rewrite <- Cond3 in goal at 0(rank:26.)
=================================================
Progress: 821


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
=================================================
Progress: 822


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond3 in goal at 0(rank:19.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite <- Case1 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:30.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:27.)
=================================================
Progress: 823


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:30.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
=================================================
Progress: 824


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 825


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 826


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 827


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 828


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 829


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 830


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 831


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 832


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 833


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 834


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 835


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 836


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if true then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 837


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if true then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:11.)
=================================================
Progress: 838


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 839


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 840


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 841


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 842


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 843


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 844


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (if true then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (SUCC (nat5)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:8.)
=================================================
Progress: 845


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (SUCC (nat5)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (SUCC (nat5)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 846


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : true = true
---------------------------------------
Tuple2 (SUCC (nat5)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (SUCC (nat6)) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 847


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (SUCC (nat6)) (SUCC (nat4)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (SUCC (nat6)) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (SUCC (nat6)) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 848


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
---------------------------------------
gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 849


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
---------------------------------------
lq (nat5) (nat4) = true->lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 850


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
lq (nat6) (nat4) = true -> Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:8.)
rewrite Cond3 in goal at 0(rank:15.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 851


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond3 in goal at 0(rank:16.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 852


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 853


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:15.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 854


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 855


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:10.)
=================================================
Progress: 856


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case lq (nat6) (SUCC (nat4))(rank:11.)
=================================================
Progress: 857


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 858


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:30.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 859


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite Cond2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 860


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 861


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:20.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 862


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 863


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
=================================================
Progress: 864


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:20.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 865


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
=================================================
Progress: 866


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 867


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 868


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 869


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 870


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 871


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 872


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 873


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 874


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 875


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 876


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 877


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 878


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 879


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
forall (nat1:nat), lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 880


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 881


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
---------------------------------------
forall (nat1:nat), lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 882


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 883


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), lq (nat3) (nat2) = true->lq (nat3) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)
nat2 : nat
nat3 : nat
Cond1 : lq (nat3) (nat2) = true
Cond2 : lq (nat3) (SUCC (nat2)) = true
nat1 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (nat3) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
asdf
=================================================
Progress: 884


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 885


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 886


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 887


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 888


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond6(rank:9.)
=================================================
Progress: 889


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond6(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond6 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond6 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 890


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond6 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro nat1(rank:11.)
intro nat2(rank:11.)
intro nat3(rank:11.)
=================================================
Progress: 891


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat2(rank:11.)
intro nat3(rank:11.)
=================================================
Progress: 892


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 893


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat3 : nat
---------------------------------------
forall (nat1:nat) (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 894


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 895


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat3 : nat
---------------------------------------
forall (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 896


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
asdf
=================================================
Progress: 897


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 898


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 899


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 900


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 901


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 902


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 903


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 904


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 905


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 906


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 907


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 908


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond6(rank:9.)
=================================================
Progress: 909


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond6(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : lq (nat4) (SUCC (nat2)) = true
Cond6 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
asdf
=================================================
Progress: 910


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 911


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 912


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 913


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 914


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 915


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 916


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 917


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 918


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 919


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 920


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond6(rank:9.)
=================================================
Progress: 921


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond6(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond6 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 922


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 923


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 924


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 925


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 926


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 927


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 928


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 929


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 930


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 931


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 932


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond6(rank:9.)
=================================================
Progress: 933


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond6(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond5 : lq (nat4) (SUCC (nat2)) = true
Cond6 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 934


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
asdf
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 935


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 936


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 937


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 938


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 939


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 940


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
---------------------------------------
gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 941


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
---------------------------------------
lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 942


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
---------------------------------------
lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 943


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:9.)
=================================================
Progress: 944


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : lq (nat4) (SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond6(rank:9.)
=================================================
Progress: 945


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : lq (nat4) (SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond6(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : lq (nat4) (SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond6 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : lq (nat4) (SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond6 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 946


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
nat4 : nat
Cond1 : gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true
Cond2 : lq (nat3) (nat2) = true
Cond3 : lq (nat4) (nat2) = true
Cond4 : lq (nat4) (SUCC (nat2)) = true
Cond5 : gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
Cond6 : gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true
---------------------------------------
Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (SUCC (nat3)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
intro nat1(rank:11.)
intro nat2(rank:11.)
intro nat3(rank:11.)
=================================================
Progress: 947


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro nat2(rank:11.)
intro nat3(rank:11.)
=================================================
Progress: 948


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 949


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat3 : nat
---------------------------------------
forall (nat1:nat) (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 950


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 951


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat3 : nat
---------------------------------------
forall (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 952


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 953


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
asdf
=================================================
Progress: 954


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 955


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro nat1(rank:9.)
intro nat2(rank:9.)
intro nat3(rank:9.)
=================================================
Progress: 956


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro nat2(rank:9.)
intro nat3(rank:9.)
=================================================
Progress: 957


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 958


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat3 : nat
---------------------------------------
forall (nat1:nat) (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 959


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 960


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat3 : nat
---------------------------------------
forall (nat2:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 961


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
=================================================
Progress: 962


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
Tuple2 (SUCC (nat3)) (nat1) = Tuple2 (SUCC (nat2)) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
asdf
=================================================
Progress: 963


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (ZERO) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
asdf
=================================================
Progress: 964


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 965


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if true then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 966


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if true then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:16.)
rewrite <- IH3 in goal at 0(rank:27.)
=================================================
Progress: 967


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 968


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:11.)
=================================================
Progress: 969


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 970


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 971


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:20.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 972


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 973


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 974


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 12
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond1 in goal at 2(rank:26.)
rewrite <- Cond2 in goal at 1(rank:26.)
rewrite <- Cond2 in goal at 2(rank:26.)
rewrite <- Cond3 in goal at 0(rank:26.)
rewrite <- Cond3 in goal at 1(rank:26.)
rewrite <- Cond2 in goal at 0(rank:26.)
rewrite <- Cond1 in goal at 1(rank:26.)
case lq (nat6) (SUCC (nat4))(rank:11.)
rewrite <- Cond3 in goal at 2(rank:26.)
=================================================
Progress: 975


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 16
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- Cond3 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 2(rank:27.)
rewrite <- Cond3 in goal at 1(rank:19.)
rewrite <- Cond3 in goal at 2(rank:27.)
rewrite <- Cond2 in goal at 1(rank:19.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite <- Case1 in goal at 1(rank:19.)
rewrite <- Cond1 in goal at 1(rank:19.)
rewrite IH3 in goal at 0(rank:22.)
rewrite Cond3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 2(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 976


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 16
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond2 in goal at 2(rank:19.)
rewrite <- Cond3 in goal at 2(rank:19.)
rewrite <- Cond3 in goal at 1(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 1(rank:27.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite Cond3 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 2(rank:19.)
rewrite <- Cond1 in goal at 2(rank:19.)
rewrite <- Cond1 in goal at 1(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 1(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 977


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite Cond3 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
rewrite <- Cond3 in goal at 0(rank:27.)
rewrite IH3 in goal at 0(rank:30.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
=================================================
Progress: 978


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 18
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 2(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:28.)
rewrite <- Case2 in goal at 2(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 2(rank:28.)
rewrite <- Cond2 in goal at 1(rank:28.)
rewrite <- Cond2 in goal at 2(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 1(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 1(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
rewrite <- Cond3 in goal at 2(rank:28.)
=================================================
Progress: 979


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite IH3 in goal at 0(rank:23.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond3 in goal at 0(rank:20.)
=================================================
Progress: 980


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 18
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 2(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 1(rank:28.)
rewrite <- Case2 in goal at 2(rank:28.)
rewrite <- Case1 in goal at 1(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 2(rank:28.)
rewrite <- Cond2 in goal at 1(rank:28.)
rewrite <- Cond2 in goal at 2(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 1(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 1(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
rewrite <- Cond3 in goal at 2(rank:28.)
=================================================
Progress: 981


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite IH3 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 982


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite IH3 in goal at 0(rank:23.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond3 in goal at 0(rank:20.)
=================================================
Progress: 983


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite IH3 in goal at 0(rank:23.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 984


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 985


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 986


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 987


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 988


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 989


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 990


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case lq (nat6) (SUCC (nat4))(rank:11.)
=================================================
Progress: 991


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
rewrite Cond3 in goal at 0(rank:27.)
=================================================
Progress: 992


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite Cond3 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 993


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:30.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite Cond3 in goal at 0(rank:19.)
rewrite Cond2 in goal at 0(rank:27.)
=================================================
Progress: 994


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
=================================================
Progress: 995


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond2 in goal at 0(rank:20.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 996


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
=================================================
Progress: 997


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite Cond2 in goal at 0(rank:28.)
=================================================
Progress: 998


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond2 in goal at 0(rank:20.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 999


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite Cond2 in goal at 0(rank:28.)
=================================================
Progress: 1000


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1001


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1002


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1003


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1004


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1005


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1006


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:11.)
case lq (nat6) (SUCC (nat4))(rank:11.)
=================================================
Progress: 1007


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:27.)
=================================================
Progress: 1008


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite Cond2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 1009


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite Cond2 in goal at 0(rank:27.)
rewrite Cond2 in goal at 1(rank:27.)
rewrite Cond2 in goal at 2(rank:27.)
rewrite IH3 in goal at 0(rank:30.)
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
=================================================
Progress: 1010


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
rewrite Cond2 in goal at 0(rank:28.)
=================================================
Progress: 1011


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 2(rank:20.)
rewrite IH3 in goal at 0(rank:23.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite Cond2 in goal at 1(rank:28.)
=================================================
Progress: 1012


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:23.)
rewrite Cond2 in goal at 0(rank:28.)
=================================================
Progress: 1013


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 1(rank:20.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite Cond2 in goal at 2(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
=================================================
Progress: 1014


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 2(rank:20.)
rewrite IH3 in goal at 0(rank:23.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite Cond2 in goal at 1(rank:28.)
=================================================
Progress: 1015


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 1(rank:20.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite Cond2 in goal at 2(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
=================================================
Progress: 1016


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 1(rank:29.)
rewrite Cond2 in goal at 2(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1017


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 1(rank:29.)
rewrite Cond2 in goal at 2(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1018


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 1(rank:29.)
rewrite Cond2 in goal at 2(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1019


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 1(rank:29.)
rewrite Cond2 in goal at 2(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1020


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 1(rank:29.)
rewrite Cond2 in goal at 2(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1021


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 1(rank:29.)
rewrite Cond2 in goal at 2(rank:29.)
rewrite IH3 in goal at 0(rank:32.)
=================================================
Progress: 1022


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1023


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Case1 in goal at 0(rank:20.)
=================================================
Progress: 1024


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Case1 in goal at 0(rank:28.)
=================================================
Progress: 1025


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:13.)
=================================================
Progress: 1026


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:13.)
=================================================
Progress: 1027


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1028


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1029


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1030


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1031


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Case1 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Case1 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Case1 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Case1 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 1032


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Case1 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Case1 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Case1 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Case1 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
=================================================
Progress: 1033


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1034


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:20.)
=================================================
Progress: 1035


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
=================================================
Progress: 1036


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:13.)
=================================================
Progress: 1037


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:13.)
=================================================
Progress: 1038


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1039


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1040


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1041


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1042


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Cond2 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Cond2 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
=================================================
Progress: 1043


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Cond2 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Cond2 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
asdf
=================================================
Progress: 1044


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond3 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1045


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
=================================================
Progress: 1046


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
=================================================
Progress: 1047


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:13.)
=================================================
Progress: 1048


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:13.)
=================================================
Progress: 1049


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1050


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1051


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1052


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1053


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Cond3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Cond3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 1054


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Cond3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite <- Cond3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
asdf
=================================================
Progress: 1055


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1056


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case lq (nat6) (SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
Prop: Tuple2 (if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO) = Tuple2 (if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO)
Prop: Tuple2 (if gq (SUCC (SUCC (ZERO))) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) (ZERO) = Tuple2 (if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO) = Tuple2 (if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (if gq (SUCC (ZERO)) (SUCC (ZERO)) then SUCC (ZERO) else ZERO) (SUCC (ZERO)) = Tuple2 (if gq (ZERO) (SUCC (ZERO)) then ZERO else ZERO) (SUCC (ZERO))
Prop: Tuple2 (if gq (SUCC (SUCC (SUCC (ZERO)))) (ZERO) then SUCC (SUCC (SUCC (ZERO))) else SUCC (ZERO)) (ZERO) = Tuple2 (if gq (SUCC (SUCC (ZERO))) (ZERO) then SUCC (SUCC (ZERO)) else SUCC (ZERO)) (ZERO)
Prop: Tuple2 (if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO) = Tuple2 (if gq (ZERO) (ZERO) then ZERO else ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1057


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 1058


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 1059


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
---------------------------------------
forall (nat2:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat4(rank:9.)
=================================================
Progress: 1060


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
---------------------------------------
forall (nat2:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
---------------------------------------
forall (nat2:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat5(rank:9.)
=================================================
Progress: 1061


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
---------------------------------------
forall (nat2:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat5(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
---------------------------------------
forall (nat2:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat6(rank:10.)
=================================================
Progress: 1062


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
---------------------------------------
forall (nat2:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat6(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
---------------------------------------
forall (nat2:nat), gq (SUCC (nat5)) (if gq (ZERO) (nat4) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (ZERO) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (if gq (ZERO) (nat2) then ZERO else nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1063


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
---------------------------------------
forall (nat2:nat), gq (SUCC (nat5)) (if gq (ZERO) (nat4) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (ZERO) (nat4) = true->lq (ZERO) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (if gq (ZERO) (nat2) then ZERO else nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
---------------------------------------
forall (nat2:nat), gq (nat5) (nat4) = true->lq (nat5) (nat4) = true->lq (ZERO) (nat4) = true->true = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1064


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
---------------------------------------
forall (nat2:nat), gq (nat5) (nat4) = true->lq (nat5) (nat4) = true->lq (ZERO) (nat4) = true->true = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
---------------------------------------
forall (nat2:nat), lq (nat5) (nat4) = true->lq (ZERO) (nat4) = true->true = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 1065


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
---------------------------------------
forall (nat2:nat), lq (nat5) (nat4) = true->lq (ZERO) (nat4) = true->true = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat4) = true->true = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:10.)
=================================================
Progress: 1066


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
---------------------------------------
forall (nat2:nat), lq (ZERO) (nat4) = true->true = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (ZERO) (nat4) = true
---------------------------------------
forall (nat2:nat), true = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:10.)
=================================================
Progress: 1067


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (ZERO) (nat4) = true
---------------------------------------
forall (nat2:nat), true = true -> Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (ZERO) (nat4) = true
Cond4 : true = true
---------------------------------------
forall (nat2:nat), Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:11.)
=================================================
Progress: 1068


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (ZERO) (nat4) = true
Cond4 : true = true
---------------------------------------
forall (nat2:nat), Tuple2 (if gq (SUCC (ZERO)) (nat2) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (ZERO) (nat4) = true
Cond4 : true = true
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
Tuple2 (if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1069


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (ZERO) (nat4) = true
Cond4 : true = true
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
Tuple2 (if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else nat1) (nat3) = Tuple2 (nat1) (nat3)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat) (nat5:nat) (nat6:nat), gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (SUCC (nat6)) (nat2) then SUCC (nat6) else nat1) (nat3) = Tuple2 (if gq (nat6) (nat2) then nat6 else nat1) (nat3)
nat1 : nat
nat3 : nat
nat4 : nat
nat5 : nat
nat6 : nat
Base1 : nat6 = ZERO
Cond1 : gq (nat5) (nat4) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (ZERO) (nat4) = true
Cond4 : true = true
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
Tuple2 (SUCC (ZERO)) (nat3) = Tuple2 (nat1) (nat3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
asdf
=================================================
Progress: 1070


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite Cond3 in goal at 0(rank:27.)
rewrite IH3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
=================================================
Progress: 1071


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite <- Cond3 in goal at 0(rank:20.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond3 in goal at 0(rank:20.)
=================================================
Progress: 1072


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Case1 in goal at 0(rank:28.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1073


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 1074


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 1075


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 1(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite Cond3 in goal at 0(rank:27.)
rewrite IH3 in goal at 0(rank:30.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
=================================================
Progress: 1076


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite <- Cond3 in goal at 0(rank:20.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond3 in goal at 0(rank:20.)
=================================================
Progress: 1077


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond1 in goal at 0(rank:28.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1078


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 1079


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 1080


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1081


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite Cond2 in goal at 1(rank:28.)
rewrite Cond2 in goal at 2(rank:28.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1082


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 2(rank:20.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite Cond2 in goal at 1(rank:28.)
=================================================
Progress: 1083


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 1(rank:21.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond2 in goal at 2(rank:29.)
=================================================
Progress: 1084


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 1(rank:21.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond2 in goal at 2(rank:29.)
=================================================
Progress: 1085


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 1(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
rewrite Cond3 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
=================================================
Progress: 1086


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:20.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1087


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1088


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 1089


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 1090


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond3 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1091


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite Cond3 in goal at 1(rank:28.)
rewrite Cond3 in goal at 2(rank:28.)
rewrite Cond3 in goal at 3(rank:28.)
=================================================
Progress: 1092


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 3(rank:20.)
rewrite Cond3 in goal at 2(rank:28.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite Cond3 in goal at 1(rank:28.)
=================================================
Progress: 1093


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond3 in goal at 1(rank:21.)
rewrite Cond3 in goal at 2(rank:21.)
rewrite Cond3 in goal at 3(rank:29.)
=================================================
Progress: 1094


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond3 in goal at 1(rank:21.)
rewrite Cond3 in goal at 2(rank:21.)
rewrite Cond3 in goal at 3(rank:29.)
=================================================
Progress: 1095


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond3 in goal at 1(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite IH3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1096


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 10
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite Cond3 in goal at 2(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
rewrite Cond3 in goal at 1(rank:28.)
rewrite <- Cond3 in goal at 0(rank:20.)
=================================================
Progress: 1097


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite Cond3 in goal at 1(rank:28.)
rewrite Cond3 in goal at 2(rank:28.)
rewrite IH3 in goal at 0(rank:31.)
=================================================
Progress: 1098


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond3 in goal at 1(rank:21.)
rewrite Cond3 in goal at 2(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 1099


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond3 in goal at 0(rank:21.)
rewrite Cond3 in goal at 1(rank:21.)
rewrite Cond3 in goal at 2(rank:21.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 1100


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1101


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 0(rank:19.)
rewrite <- Cond2 in goal at 0(rank:19.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond3 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 1102


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
=================================================
Progress: 1103


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Case1 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:20.)
=================================================
Progress: 1104


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite Case1 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1105


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:29.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite Cond3 in goal at 0(rank:29.)
=================================================
Progress: 1106


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:29.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite Cond3 in goal at 0(rank:29.)
=================================================
Progress: 1107


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 2(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond2 in goal at 0(rank:27.)
=================================================
Progress: 1108


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond1 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:20.)
=================================================
Progress: 1109


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1110


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond1 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:21.)
rewrite <- Cond1 in goal at 0(rank:21.)
rewrite <- Cond2 in goal at 0(rank:21.)
rewrite <- Cond3 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite Cond3 in goal at 0(rank:29.)
=================================================
Progress: 1111


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond1 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Cond1 in goal at 0(rank:21.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:21.)
rewrite <- Cond3 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite Cond3 in goal at 0(rank:29.)
=================================================
Progress: 1112


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 2(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond3 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
=================================================
Progress: 1113


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:20.)
=================================================
Progress: 1114


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1115


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 0(rank:29.)
=================================================
Progress: 1116


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 0(rank:29.)
=================================================
Progress: 1117


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond3 in goal at 2(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
rewrite <- Cond2 in goal at 0(rank:27.)
case lq (nat6) (SUCC (nat4))(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
=================================================
Progress: 1118


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
rewrite Cond3 in goal at 2(rank:20.)
rewrite <- Cond2 in goal at 0(rank:20.)
rewrite <- Cond3 in goal at 0(rank:20.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite Cond3 in goal at 1(rank:28.)
=================================================
Progress: 1119


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 1(rank:20.)
rewrite <- Case1 in goal at 0(rank:28.)
rewrite <- Case2 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite <- Cond2 in goal at 0(rank:28.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite <- Cond3 in goal at 0(rank:28.)
=================================================
Progress: 1120


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Cond3 in goal at 0(rank:29.)
rewrite Cond3 in goal at 2(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite Cond3 in goal at 1(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
=================================================
Progress: 1121


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Cond3 in goal at 0(rank:29.)
rewrite Cond3 in goal at 2(rank:29.)
rewrite <- Case2 in goal at 0(rank:29.)
rewrite <- Case3 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite Cond3 in goal at 1(rank:29.)
rewrite <- Cond3 in goal at 0(rank:29.)
=================================================
Progress: 1122


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1123


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if true then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1124


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:15.)
=================================================
Progress: 1125


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 1126


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

11 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:19.)
=================================================
Progress: 1127


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1128


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:19.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 1129


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat6) (nat4) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1130


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else SUCC (nat6)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond2 in goal at 0(rank:27.)
rewrite Cond2 in goal at 1(rank:27.)
rewrite Cond2 in goal at 2(rank:27.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 1131


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1132


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1133


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:15.)
=================================================
Progress: 1134


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 1135


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

11 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (nat6) (SUCC (nat4))(rank:19.)
=================================================
Progress: 1136


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1137


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Case1 in goal at 0(rank:20.)
=================================================
Progress: 1138


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
rewrite Case1 in goal at 0(rank:28.)
=================================================
Progress: 1139


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:13.)
=================================================
Progress: 1140


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:13.)
=================================================
Progress: 1141


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1142


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1143


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1144


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1145


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Case1 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Case1 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Case1 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Case1 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
=================================================
Progress: 1146


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Case1 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Case1 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))
Prop: Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Case1 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Case1 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
=================================================
Progress: 1147


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond2 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1148


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond2 in goal at 0(rank:20.)
=================================================
Progress: 1149


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
=================================================
Progress: 1150


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:13.)
=================================================
Progress: 1151


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:13.)
=================================================
Progress: 1152


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1153


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1154


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1155


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1156


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Cond2 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Cond2 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 1157


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Cond2 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Cond2 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
=================================================
Progress: 1158


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond3 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:12.)
case lq (nat6) (SUCC (nat4))(rank:12.)
=================================================
Progress: 1159


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (nat6) (SUCC (nat4))(rank:13.)
rewrite Cond3 in goal at 0(rank:20.)
=================================================
Progress: 1160


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:13.)
=================================================
Progress: 1161


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if true then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5) else nat6)

5 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:13.)
=================================================
Progress: 1162


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:13.)
=================================================
Progress: 1163


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1164


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (nat4) then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1165


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1166


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if true then SUCC (nat4) else SUCC (nat5))

6 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:16.)
=================================================
Progress: 1167


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Cond3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Cond3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 1168


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

6 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
Case3 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

9 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Cond3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite IH3 in goal at 0
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite <- IH3 in goal at 0
case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
rewrite <- Cond3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond3 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
asdf
=================================================
Progress: 1169


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

11 goal(s) more...

2 conjecture(s) more...
>>> case gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if true then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if true then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if true then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (SUCC (nat4))

12 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:22.)
=================================================
Progress: 1170


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1171


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 1172


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank:15.)
=================================================
Progress: 1173


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (if gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then SUCC (nat6) else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

7 goal(s) more...

2 conjecture(s) more...
>>> case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 1174


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))

8 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

11 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (nat6) (SUCC (nat4))(rank:19.)
=================================================
Progress: 1175


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

11 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

12 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 1176


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->lq (nat6) (SUCC (nat4)) = true -> Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat6) (SUCC (nat4)) then if lq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat4) else SUCC (nat5) else nat6)

11 goal(s) more...

2 conjecture(s) more...
>>> case lq (nat6) (SUCC (nat4))(rank : 19.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case3 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (nat6) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

12 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27.)
rewrite IH3 in goal at 0(rank:30.)
=================================================
Progress: 1177


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 20.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1178


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
case lq (nat6) (SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (if gq (SUCC (SUCC (ZERO))) (if gq (ZERO) (SUCC (ZERO)) then SUCC (ZERO) else ZERO) then SUCC (SUCC (ZERO)) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (SUCC (SUCC (ZERO))) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) then ZERO else if gq (SUCC (SUCC (ZERO))) (ZERO) then SUCC (SUCC (ZERO)) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (if gq (ZERO) (if gq (ZERO) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (ZERO)) then ZERO else if gq (SUCC (ZERO)) (SUCC (ZERO)) then SUCC (ZERO) else SUCC (ZERO)) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1179


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
Case2 : lq (nat6) (SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 1180


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->lq (nat3) (ZERO) = true->lq (nat4) (ZERO) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1181


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->lq (nat3) (ZERO) = true->lq (nat4) (ZERO) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat3(rank:11.)
=================================================
Progress: 1182


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (ZERO) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1183


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (ZERO) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat4) (ZERO) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:12.)
=================================================
Progress: 1184


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat4) (ZERO) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
Base3 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (ZERO) (ZERO) = true->lq (ZERO) (SUCC (ZERO)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 1185


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
Base3 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (ZERO) (ZERO) = true->lq (ZERO) (SUCC (ZERO)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
nat5 : nat
IH1 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat5) (ZERO) = true->lq (nat5) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat5)) (nat1) = Tuple2 (if gq (nat5) (nat1) then nat5 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive1 : nat4 = SUCC (nat5)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat5))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat5)) (ZERO) = true->lq (SUCC (nat5)) (SUCC (ZERO)) = true -> Tuple2 (SUCC (SUCC (nat5))) (nat1) = Tuple2 (if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 1186


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
nat5 : nat
IH1 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat5) (ZERO) = true->lq (nat5) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat5)) (nat1) = Tuple2 (if gq (nat5) (nat1) then nat5 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive1 : nat4 = SUCC (nat5)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat5))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat5)) (ZERO) = true->lq (SUCC (nat5)) (SUCC (ZERO)) = true -> Tuple2 (SUCC (SUCC (nat5))) (nat1) = Tuple2 (if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else nat1) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1187


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else nat1) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (SUCC (SUCC (nat5))) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:11.)
=================================================
Progress: 1188


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (SUCC (SUCC (nat5))) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (ZERO) (SUCC (nat5)) = true->lq (ZERO) (SUCC (ZERO)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (SUCC (SUCC (nat5))) then ZERO else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1189


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (ZERO) (SUCC (nat5)) = true->lq (ZERO) (SUCC (ZERO)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (SUCC (SUCC (nat5))) then ZERO else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->false = true->false = true->false = true->true = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 1190


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->false = true->false = true->false = true->true = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), false = true->false = true->false = true->true = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 1191


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), false = true->false = true->false = true->true = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (SUCC (nat6)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat6)) (SUCC (nat5)) = true->lq (SUCC (nat6)) (SUCC (ZERO)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (SUCC (SUCC (nat5))) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1192


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (SUCC (nat6)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat6)) (SUCC (nat5)) = true->lq (SUCC (nat6)) (SUCC (ZERO)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (SUCC (SUCC (nat5))) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (nat5) (nat6) = true->false = true->false = true->gq (nat6) (nat5) = true->false = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1193


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (nat5) (nat6) = true->false = true->false = true->gq (nat6) (nat5) = true->false = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (nat5) (nat6) = true
---------------------------------------
forall (nat1:nat), false = true->false = true->gq (nat6) (nat5) = true->false = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 1194


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true->lq (nat4) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (ZERO)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (nat5) (nat6) = true
---------------------------------------
forall (nat1:nat), false = true->false = true->gq (nat6) (nat5) = true->false = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat3) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat3(rank:10.)
=================================================
Progress: 1195


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat3) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (ZERO) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1196


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (ZERO) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true->lq (nat4) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat4) (SUCC (nat5)) = true->gq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:11.)
=================================================
Progress: 1197


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat4) (SUCC (nat5)) = true->gq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (ZERO) (SUCC (nat5)) = true->gq (ZERO) (SUCC (nat5)) = true->lq (ZERO) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 1198


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (ZERO) (SUCC (nat5)) = true->gq (ZERO) (SUCC (nat5)) = true->lq (ZERO) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat6)) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (SUCC (nat6)) (SUCC (nat5)) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true->lq (SUCC (nat6)) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1199


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat6)) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (SUCC (nat6)) (SUCC (nat5)) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true->lq (SUCC (nat6)) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true->lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1200


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true->lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
---------------------------------------
forall (nat1:nat), true = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true->lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 1201


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
---------------------------------------
forall (nat1:nat), true = true->lq (nat6) (nat5) = true->gq (nat6) (nat5) = true->lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
---------------------------------------
forall (nat1:nat), lq (nat6) (nat5) = true->gq (nat6) (nat5) = true->lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:10.)
=================================================
Progress: 1202


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
---------------------------------------
forall (nat1:nat), lq (nat6) (nat5) = true->gq (nat6) (nat5) = true->lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), gq (nat6) (nat5) = true->lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:10.)
=================================================
Progress: 1203


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), gq (nat6) (nat5) = true->lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:10.)
=================================================
Progress: 1204


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
---------------------------------------
forall (nat1:nat), lq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond5(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 1205


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
---------------------------------------
forall (nat1:nat), Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (nat1) then SUCC (nat6) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (SUCC (nat6)) (ZERO) then SUCC (nat6) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1206


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (SUCC (nat6)) (ZERO) then SUCC (nat6) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (SUCC (nat6)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:16.)
=================================================
Progress: 1207


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (SUCC (nat6)) (ZERO)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (nat6) (ZERO) then nat6 else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

7 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case gq (nat6) (ZERO)(rank:17.)
=================================================
Progress: 1208


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (if gq (nat6) (ZERO) then nat6 else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)

7 goal(s) more...

3 conjecture(s) more...
>>> case gq (nat6) (ZERO)(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
Case1 : gq (nat6) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (nat6) (ZERO)

8 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH2 in goal at 0
case gq (nat6) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
Case1 : gq (nat6) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (nat6) (ZERO)

8 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1209


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat6) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat6) (SUCC (nat5)) = true->gq (nat6) (SUCC (nat5)) = true->lq (nat6) (SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (nat1) then nat6 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (SUCC (ZERO)) (if gq (nat6) (nat5) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true
Cond2 : true = true
Cond3 : lq (nat6) (nat5) = true
Cond4 : gq (nat6) (nat5) = true
Cond5 : lq (nat6) (SUCC (nat5)) = true
nat1 : nat
Base2 : nat1 = ZERO
Case1 : gq (nat6) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat6))) (ZERO) = Tuple2 (nat6) (ZERO)

8 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)(rank : 0.)


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1210


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
---------------------------------------
true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 1211


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
---------------------------------------
true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
Cond1 : true = true
---------------------------------------
gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 1212


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
Cond1 : true = true
---------------------------------------
gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)
nat1 : nat
Cond1 : true = true
Cond2 : gq (nat1) (ZERO) = true
---------------------------------------
Tuple2 (SUCC (SUCC (nat1))) (ZERO) = Tuple2 (nat1) (ZERO)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (ZERO)
asdf
=================================================
Progress: 1213


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 20.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1214


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if true then SUCC (nat4) else SUCC (nat5))

5 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
rewrite Cond3 in goal at 0
simpl in goal
rewrite Cond2 in goal at 0
simpl in goal
rewrite <- IH3 in goal at 0
case lq (nat6) (SUCC (nat4))
case gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4))
rewrite Cond2 in goal at 0
simpl in goal
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (if gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (SUCC (ZERO))) then SUCC (ZERO) else ZERO) then SUCC (ZERO) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (if gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then SUCC (ZERO) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (if gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then SUCC (ZERO) else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (ZERO) then SUCC (SUCC (ZERO)) else SUCC (ZERO)) then ZERO else if gq (SUCC (SUCC (ZERO))) (SUCC (ZERO)) then SUCC (SUCC (ZERO)) else SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (if gq (ZERO) (if gq (SUCC (ZERO)) (ZERO) then SUCC (SUCC (ZERO)) else SUCC (ZERO)) then ZERO else if gq (SUCC (SUCC (ZERO))) (SUCC (ZERO)) then SUCC (SUCC (ZERO)) else SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (if gq (ZERO) (if gq (ZERO) (ZERO) then SUCC (ZERO) else ZERO) then ZERO else if gq (SUCC (ZERO)) (ZERO) then SUCC (ZERO) else ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 1215


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat1) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) = true->lq (nat2) (nat1) = true->lq (nat3) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (nat1) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)
nat1 : nat
nat4 : nat
IH1 : forall (nat2:nat) (nat3:nat), gq (nat2) (if gq (nat3) (nat4) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat4) = true->lq (nat2) (nat4) = true->lq (nat3) (nat4) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat4) then nat2 else nat4) then nat3 else if gq (nat2) (nat4) then nat2 else nat4) (if lq (nat3) (nat4) then if lq (nat2) (nat4) then nat4 else nat2 else nat3) = Tuple2 (nat2) (nat4)
Inductive1 : nat1 = SUCC (nat4)
nat2 : nat
nat5 : nat
IH2 : forall (nat3:nat), gq (nat5) (if gq (nat3) (SUCC (nat4)) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (SUCC (nat4)) = true->lq (nat3) (SUCC (nat4)) = true -> Tuple2 (if gq (nat3) (if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) then nat3 else if gq (nat5) (SUCC (nat4)) then nat5 else SUCC (nat4)) (if lq (nat3) (SUCC (nat4)) then if lq (nat5) (SUCC (nat4)) then SUCC (nat4) else nat5 else nat3) = Tuple2 (nat5) (SUCC (nat4))
Inductive2 : nat2 = SUCC (nat5)
nat3 : nat
nat6 : nat
IH3 : gq (SUCC (nat5)) (if gq (nat6) (SUCC (nat4)) then match (reprNew (Leaf (nat6))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true->lq (nat5) (nat4) = true->true = true -> Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (if lq (nat5) (nat4) then SUCC (nat4) else SUCC (nat5)) = Tuple2 (SUCC (nat5)) (SUCC (nat4))
Inductive3 : nat3 = SUCC (nat6)
Cond1 : gq (SUCC (nat5)) (if gq (nat6) (nat4) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (nat4)) = true
Cond2 : lq (nat5) (nat4) = true
Cond3 : lq (nat6) (nat4) = true
Case1 : lq (nat6) (SUCC (nat4)) = true
Case2 : gq (SUCC (nat6)) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) = true
---------------------------------------
Tuple2 (SUCC (nat6)) (SUCC (nat4)) = Tuple2 (if gq (nat6) (if gq (nat5) (nat4) then SUCC (nat5) else SUCC (nat4)) then nat6 else if gq (SUCC (nat5)) (SUCC (nat4)) then SUCC (nat5) else SUCC (nat4)) (SUCC (nat4))

5 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 1216


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->lq (nat3) (ZERO) = true->lq (nat4) (ZERO) = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1217


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->lq (nat3) (ZERO) = true->lq (nat4) (ZERO) = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat3(rank:11.)
=================================================
Progress: 1218


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat3) (ZERO) then SUCC (nat3) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (ZERO) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (ZERO) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1219


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (ZERO) (ZERO) then SUCC (ZERO) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (ZERO) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (nat4) (ZERO) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:12.)
=================================================
Progress: 1220


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (nat4) (ZERO) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
Base3 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (ZERO) (SUCC (ZERO)) = true->gq (ZERO) (ZERO) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 1221


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
Base3 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (ZERO) (SUCC (ZERO)) = true->gq (ZERO) (ZERO) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
nat5 : nat
IH1 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat5) (SUCC (ZERO)) = true->gq (nat5) (ZERO) = true -> Tuple2 (SUCC (nat5)) (nat1) = Tuple2 (if gq (nat5) (nat1) then nat5 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive1 : nat4 = SUCC (nat5)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat5))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (SUCC (nat5)) (SUCC (ZERO)) = true->gq (SUCC (nat5)) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat5))) (nat1) = Tuple2 (if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 1222


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
nat4 : nat
nat5 : nat
IH1 : forall (nat1:nat), gq (SUCC (ZERO)) (if gq (nat5) (ZERO) then match (reprNew (Leaf (SUCC (nat5)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat5) (SUCC (ZERO)) = true->gq (nat5) (ZERO) = true -> Tuple2 (SUCC (nat5)) (nat1) = Tuple2 (if gq (nat5) (nat1) then nat5 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)
Inductive1 : nat4 = SUCC (nat5)
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (SUCC (nat5)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat5))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (SUCC (nat5)) (SUCC (ZERO)) = true->gq (SUCC (nat5)) (ZERO) = true -> Tuple2 (SUCC (SUCC (nat5))) (nat1) = Tuple2 (if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else nat1) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1223


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (SUCC (nat5)) (ZERO) then SUCC (SUCC (nat5)) else nat1) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (SUCC (SUCC (nat5))) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:11.)
=================================================
Progress: 1224


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (SUCC (nat5))) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (SUCC (SUCC (nat5))) then nat4 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (ZERO) (SUCC (ZERO)) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (SUCC (SUCC (nat5))) then ZERO else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1225


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (ZERO) (ZERO) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (ZERO) (SUCC (ZERO)) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (SUCC (SUCC (nat5))) then ZERO else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->false = true->false = true->true = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 1226


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), true = true->false = true->false = true->true = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), false = true->false = true->true = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:10.)
=================================================
Progress: 1227


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
Base2 : nat4 = ZERO
Cond1 : true = true
---------------------------------------
forall (nat1:nat), false = true->false = true->true = true->false = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat6) (SUCC (ZERO)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (SUCC (nat6)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (SUCC (nat6)) (SUCC (ZERO)) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (SUCC (SUCC (nat5))) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1228


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat6) (SUCC (ZERO)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (SUCC (nat6)) (ZERO) then match (reprNew (Leaf (SUCC (SUCC (nat6))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (SUCC (nat6)) (SUCC (ZERO)) = true->gq (SUCC (nat6)) (SUCC (nat5)) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (SUCC (nat6)) (SUCC (SUCC (nat5))) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat6) (SUCC (ZERO)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (nat5) (nat6) = true->false = true->false = true->false = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 1229


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat6) (SUCC (ZERO)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
---------------------------------------
forall (nat1:nat), gq (nat5) (nat6) = true->false = true->false = true->false = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat6) (SUCC (ZERO)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (nat5) (nat6) = true
---------------------------------------
forall (nat1:nat), false = true->false = true->false = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 1230


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat4:nat), gq (SUCC (nat5)) (if gq (nat4) (ZERO) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat4) (SUCC (ZERO)) = true->gq (SUCC (nat4)) (if gq (nat5) (ZERO) then SUCC (nat5) else SUCC (ZERO)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat5) (ZERO) then SUCC (nat5) else nat1) then nat4 else if gq (SUCC (nat5)) (nat1) then SUCC (nat5) else nat1) (nat1)
Inductive1 : nat3 = SUCC (nat5)
nat4 : nat
nat6 : nat
IH2 : forall (nat1:nat), gq (SUCC (SUCC (nat5))) (if gq (nat6) (ZERO) then match (reprNew (Leaf (SUCC (nat6)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) = true->false = true->false = true->lq (nat6) (SUCC (ZERO)) = true->gq (nat6) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat6)) (nat1) = Tuple2 (if gq (nat6) (SUCC (SUCC (nat5))) then nat6 else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)
Inductive2 : nat4 = SUCC (nat6)
Cond1 : gq (nat5) (nat6) = true
---------------------------------------
forall (nat1:nat), false = true->false = true->false = true->gq (nat6) (nat5) = true -> Tuple2 (SUCC (SUCC (nat6))) (nat1) = Tuple2 (if gq (nat6) (SUCC (nat5)) then SUCC (nat6) else if gq (SUCC (SUCC (nat5))) (nat1) then SUCC (SUCC (nat5)) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat3) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (SUCC (nat5))) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction nat3(rank:10.)
=================================================
Progress: 1231


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
---------------------------------------
forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (nat3) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (SUCC (nat5))) = true->gq (SUCC (nat4)) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat5)) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction nat3(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (ZERO) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (SUCC (nat5))) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1232


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->lq (ZERO) (SUCC (nat5)) = true->lq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (SUCC (nat5))) = true->gq (SUCC (nat4)) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else SUCC (SUCC (nat5))) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (ZERO) (SUCC (nat5)) then SUCC (ZERO) else nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (SUCC (nat5))) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction nat4(rank:11.)
=================================================
Progress: 1233


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
---------------------------------------
forall (nat1:nat) (nat4:nat), gq (SUCC (ZERO)) (if gq (nat4) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (nat4) (SUCC (nat5)) = true->lq (nat4) (SUCC (SUCC (nat5))) = true->gq (nat4) (SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (nat1) then nat4 else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction nat4(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat2) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat2)) = true->lq (nat3) (nat2) = true->lq (nat4) (nat2) = true->lq (nat4) (SUCC (nat2)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat2) then SUCC (nat3) else SUCC (nat2)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat2) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
nat2 : nat
nat5 : nat
IH1 : forall (nat1:nat) (nat3:nat) (nat4:nat), gq (SUCC (nat3)) (if gq (nat4) (nat5) then match (reprNew (Leaf (SUCC (nat4)))) with
| Tuple2 a _ -> a else SUCC (nat5)) = true->lq (nat3) (nat5) = true->lq (nat4) (nat5) = true->lq (nat4) (SUCC (nat5)) = true->gq (SUCC (nat4)) (if gq (nat3) (nat5) then SUCC (nat3) else SUCC (nat5)) = true -> Tuple2 (SUCC (nat4)) (nat1) = Tuple2 (if gq (nat4) (if gq (nat3) (nat5) then SUCC (nat3) else nat1) then nat4 else if gq (SUCC (nat3)) (nat1) then SUCC (nat3) else nat1) (nat1)
Inductive1 : nat2 = SUCC (nat5)
nat3 : nat
Base1 : nat3 = ZERO
nat4 : nat
Base2 : nat4 = ZERO
---------------------------------------
forall (nat1:nat), gq (SUCC (ZERO)) (if gq (ZERO) (SUCC (nat5)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (SUCC (nat5))) = true->true = true->lq (ZERO) (SUCC (nat5)) = true->lq (ZERO) (SUCC (SUCC (nat5))) = true->gq (ZERO) (SUCC (nat5)) = true -> Tuple2 (SUCC (ZERO)) (nat1) = Tuple2 (if gq (ZERO) (nat1) then ZERO else if gq (SUCC (ZERO)) (nat1) then SUCC (ZERO) else nat1) (nat1)

2 goal(s) more...

3 conjecture(s) more...
