Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), match (repr (tree1)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction tree1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), match (repr (tree1)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> induction tree1(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
Base1 : tree1 = Leaf (nat1)
---------------------------------------
match (repr (Leaf (nat1))) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (Leaf (nat1))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat1))) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
Base1 : tree1 = Leaf (nat1)
---------------------------------------
match (repr (Leaf (nat1))) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (Leaf (nat1))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat1))) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
match (repr (Node (nat1) (tree2) (tree3))) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
match (repr (Node (nat1) (tree2) (tree3))) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank:4.)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank:4.)
=================================================
Progress: 6


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:5.)
rewrite <- Case1 in goal at 0(rank:20.)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank:5.)
=================================================
Progress: 7


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank:5.)
rewrite <- Case1 in goal at 0(rank:20.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:5.)
=================================================
Progress: 8


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank:6.)
=================================================
Progress: 9


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 2(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 1(rank:21.)
rewrite <- Case2 in goal at 2(rank:21.)
rewrite <- Case1 in goal at 1(rank:21.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 10


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
rewrite <- Case1 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 2(rank:21.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 1(rank:21.)
rewrite <- Case2 in goal at 2(rank:21.)
rewrite <- Case1 in goal at 1(rank:21.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 11


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
=================================================
Progress: 12


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 13


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 14


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 15


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 16


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 17


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 18


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 19


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:17.)
=================================================
Progress: 20


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 21


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:17.)
=================================================
Progress: 22


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:17.)
=================================================
Progress: 24


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO))))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 25


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:17.)
=================================================
Progress: 26


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 27


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:17.)
=================================================
Progress: 28


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 29


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:17.)
=================================================
Progress: 30


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:18.)
=================================================
Progress: 31


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:18.)
=================================================
Progress: 32


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:18.)
=================================================
Progress: 33


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:18.)
=================================================
Progress: 34


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:18.)
=================================================
Progress: 35


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:18.)
=================================================
Progress: 36


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 37


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 38


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 39


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 40


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 41


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 42


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:19.)
=================================================
Progress: 43


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:19.)
=================================================
Progress: 44


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:19.)
=================================================
Progress: 45


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:19.)
=================================================
Progress: 46


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:19.)
=================================================
Progress: 47


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:19.)
=================================================
Progress: 48


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19.)
=================================================
Progress: 49


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19.)
=================================================
Progress: 50


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19.)
=================================================
Progress: 51


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19.)
=================================================
Progress: 52


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19.)
=================================================
Progress: 53


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (nat2) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19.)
=================================================
Progress: 54


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat3) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:19.)
=================================================
Progress: 55


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:19.)
=================================================
Progress: 56


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:19.)
=================================================
Progress: 57


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (nat1) = true->lq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:19.)
=================================================
Progress: 58


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:19.)
=================================================
Progress: 59


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat3) (nat1) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:19.)
=================================================
Progress: 60


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat3) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->gq (nat3) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:19.)
=================================================
Progress: 61


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:19.)
=================================================
Progress: 62


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (nat3) (nat1) = true->gq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:19.)
=================================================
Progress: 63


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (nat1) = true->lq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:19.)
=================================================
Progress: 64


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (nat1) = true->lq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:19.)
=================================================
Progress: 65


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat3) (nat1) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true->lq (nat3) (nat1) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:19.)
=================================================
Progress: 66


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->gq (nat3) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat3) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:19.)
=================================================
Progress: 67


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:19.)
=================================================
Progress: 68


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:19.)
=================================================
Progress: 69


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:19.)
=================================================
Progress: 70


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
---------------------------------------
lq (nat3) (nat1) = true->gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:19.)
=================================================
Progress: 71


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true->lq (nat3) (nat1) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:19.)
=================================================
Progress: 72


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat3) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:19.)
=================================================
Progress: 73


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:19.)
=================================================
Progress: 74


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
---------------------------------------
lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:19.)
=================================================
Progress: 75


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat2) (nat1) = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:19.)
=================================================
Progress: 76


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
---------------------------------------
lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:19.)
=================================================
Progress: 77


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
---------------------------------------
lq (nat3) (nat1) = true->lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:19.)
=================================================
Progress: 78


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:20.)
rewrite Cond2 in goal at 2(rank:27.)
case gq (nat2) (nat1)(rank:20.)
rewrite Cond2 in goal at 0(rank:27.)
rewrite Cond2 in goal at 1(rank:27.)
=================================================
Progress: 79


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:20.)
rewrite Cond3 in goal at 2(rank:27.)
case gq (nat2) (nat1)(rank:20.)
rewrite Cond3 in goal at 0(rank:27.)
rewrite Cond3 in goal at 1(rank:27.)
=================================================
Progress: 80


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
---------------------------------------
lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:20.)
rewrite Cond4 in goal at 2(rank:27.)
case gq (nat2) (nat1)(rank:20.)
rewrite Cond4 in goal at 0(rank:27.)
rewrite Cond4 in goal at 1(rank:27.)
=================================================
Progress: 81


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
---------------------------------------
gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:20.)
rewrite Cond3 in goal at 2(rank:27.)
case gq (nat2) (nat1)(rank:20.)
rewrite Cond3 in goal at 0(rank:27.)
rewrite Cond3 in goal at 1(rank:27.)
=================================================
Progress: 82


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
---------------------------------------
lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:20.)
rewrite Cond4 in goal at 2(rank:27.)
case gq (nat2) (nat1)(rank:20.)
rewrite Cond4 in goal at 0(rank:27.)
rewrite Cond4 in goal at 1(rank:27.)
=================================================
Progress: 83


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
---------------------------------------
lq (nat2) (nat1) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 19.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:20.)
rewrite Cond4 in goal at 2(rank:27.)
case gq (nat2) (nat1)(rank:20.)
rewrite Cond4 in goal at 0(rank:27.)
rewrite Cond4 in goal at 1(rank:27.)
=================================================
Progress: 84


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:5.)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank:5.)
=================================================
Progress: 85


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank:6.)
rewrite Case1 in goal at 0(rank:13.)
=================================================
Progress: 86


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
rewrite <- Case2 in goal at 0(rank:21.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
rewrite Case1 in goal at 0(rank:13.)
rewrite <- Case1 in goal at 0(rank:21.)
=================================================
Progress: 87


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 88


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 89


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 90


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 91


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 92


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 93


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 94


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 95


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 96


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 97


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 98


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO))))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 99


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:5.)
=================================================
Progress: 100


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank:6.)
=================================================
Progress: 101


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 102


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 103


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 104


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 105


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
rewrite <- Case2 in goal at 2(rank:21.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 1(rank:21.)
=================================================
Progress: 106


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 107


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 108


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 109


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 110


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 111


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 112


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 2(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 1(rank:22.)
rewrite <- Case3 in goal at 2(rank:22.)
rewrite <- Case2 in goal at 1(rank:22.)
=================================================
Progress: 113


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 114


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 115


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 116


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank:5.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:5.)
=================================================
Progress: 117


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
rewrite <- Case2 in goal at 0(rank:21.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
rewrite Case1 in goal at 0(rank:13.)
rewrite <- Case1 in goal at 0(rank:21.)
=================================================
Progress: 118


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
=================================================
Progress: 119


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 120


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 121


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 122


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 123


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 124


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 125


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
rewrite <- Case2 in goal at 2(rank:21.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
rewrite <- Case2 in goal at 0(rank:21.)
rewrite <- Case2 in goal at 1(rank:21.)
=================================================
Progress: 126


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 127


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 128


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 129


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 130


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 131


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
=================================================
Progress: 132


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat2) (nat1)(rank:21.)
rewrite Cond2 in goal at 0(rank:28.)
=================================================
Progress: 133


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:21.)
rewrite Cond2 in goal at 0(rank:28.)
rewrite Cond2 in goal at 2(rank:28.)
rewrite <- Cond1 in goal at 0(rank:36.)
rewrite <- Cond2 in goal at 0(rank:36.)
rewrite <- Cond3 in goal at 0(rank:36.)
rewrite <- Cond4 in goal at 0(rank:36.)
rewrite <- Case1 in goal at 0(rank:36.)
rewrite Cond2 in goal at 1(rank:28.)
case gq (nat3) (nat2)(rank:21.)
=================================================
Progress: 134


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat2) (nat1)(rank:21.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 135


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:21.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite Cond3 in goal at 2(rank:28.)
rewrite <- Cond1 in goal at 0(rank:36.)
rewrite <- Cond2 in goal at 0(rank:36.)
rewrite <- Cond3 in goal at 0(rank:36.)
rewrite <- Cond4 in goal at 0(rank:36.)
rewrite <- Case1 in goal at 0(rank:36.)
rewrite Cond3 in goal at 1(rank:28.)
case gq (nat3) (nat2)(rank:21.)
=================================================
Progress: 136


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat2) (nat1)(rank:21.)
rewrite Cond4 in goal at 0(rank:28.)
=================================================
Progress: 137


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:21.)
rewrite Cond4 in goal at 0(rank:28.)
rewrite Cond4 in goal at 2(rank:28.)
rewrite <- Cond1 in goal at 0(rank:36.)
rewrite <- Cond2 in goal at 0(rank:36.)
rewrite <- Cond3 in goal at 0(rank:36.)
rewrite <- Cond4 in goal at 0(rank:36.)
rewrite <- Case1 in goal at 0(rank:36.)
rewrite Cond4 in goal at 1(rank:28.)
case gq (nat3) (nat2)(rank:21.)
=================================================
Progress: 138


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat2) (nat1)(rank:21.)
rewrite Cond3 in goal at 0(rank:28.)
=================================================
Progress: 139


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:21.)
rewrite Cond3 in goal at 0(rank:28.)
rewrite Cond3 in goal at 2(rank:28.)
rewrite <- Cond1 in goal at 0(rank:36.)
rewrite <- Cond2 in goal at 0(rank:36.)
rewrite <- Cond3 in goal at 0(rank:36.)
rewrite <- Cond4 in goal at 0(rank:36.)
rewrite <- Case1 in goal at 0(rank:36.)
rewrite Cond3 in goal at 1(rank:28.)
case gq (nat3) (nat2)(rank:21.)
=================================================
Progress: 140


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat2) (nat1)(rank:21.)
rewrite Cond4 in goal at 0(rank:28.)
=================================================
Progress: 141


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:21.)
rewrite Cond4 in goal at 0(rank:28.)
rewrite Cond4 in goal at 2(rank:28.)
rewrite <- Cond1 in goal at 0(rank:36.)
rewrite <- Cond2 in goal at 0(rank:36.)
rewrite <- Cond3 in goal at 0(rank:36.)
rewrite <- Cond4 in goal at 0(rank:36.)
rewrite <- Case1 in goal at 0(rank:36.)
rewrite Cond4 in goal at 1(rank:28.)
case gq (nat3) (nat2)(rank:21.)
=================================================
Progress: 142


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case gq (nat2) (nat1)(rank:21.)
rewrite Cond4 in goal at 0(rank:28.)
=================================================
Progress: 143


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

2 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 20.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:21.)
rewrite Cond4 in goal at 0(rank:28.)
rewrite Cond4 in goal at 2(rank:28.)
rewrite <- Cond1 in goal at 0(rank:36.)
rewrite <- Cond2 in goal at 0(rank:36.)
rewrite <- Cond3 in goal at 0(rank:36.)
rewrite <- Cond4 in goal at 0(rank:36.)
rewrite <- Case1 in goal at 0(rank:36.)
rewrite Cond4 in goal at 1(rank:28.)
case gq (nat3) (nat2)(rank:21.)
=================================================
Progress: 144


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 145


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 2(rank:14.)
rewrite Case1 in goal at 0(rank:14.)
rewrite Case1 in goal at 1(rank:14.)
=================================================
Progress: 146


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 147


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 148


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 149


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 150


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 151


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO))))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 152


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) (Leaf (SUCC (SUCC (ZERO))))))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) (Leaf (SUCC (SUCC (ZERO))))))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) (Leaf (SUCC (SUCC (ZERO))))))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 153


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 154


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 155


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 156


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 157


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 158


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 159


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 160


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 161


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
rewrite <- Case2 in goal at 0(rank:21.)
=================================================
Progress: 162


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 163


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 164


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
rewrite <- Case2 in goal at 0(rank:21.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 165


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 166


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 167


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 168


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 169


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 170


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 171


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 172


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 173


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 2(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 1(rank:22.)
rewrite <- Case3 in goal at 2(rank:22.)
rewrite <- Case2 in goal at 1(rank:22.)
=================================================
Progress: 174


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 175


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 176


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case2 in goal at 2(rank:14.)
rewrite Case2 in goal at 0(rank:14.)
rewrite Case2 in goal at 1(rank:14.)
=================================================
Progress: 177


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 178


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 179


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 180


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 181


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 182


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 183


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 184


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 185


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 186


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 187


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 188


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 189


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) (Leaf (ZERO)))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 190


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 191


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 192


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 193


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 194


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 195


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 196


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 197


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 198


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 199


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 200


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 201


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 202


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 2(rank:14.)
rewrite Case1 in goal at 0(rank:14.)
rewrite Case1 in goal at 1(rank:14.)
=================================================
Progress: 203


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 204


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 205


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 206


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 207


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 208


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 209


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (SUCC (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 210


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 211


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 212


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 213


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 214


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 215


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 216


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 217


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 218


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
rewrite <- Case2 in goal at 0(rank:21.)
=================================================
Progress: 219


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 220


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 221


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
rewrite <- Case2 in goal at 0(rank:21.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 222


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 223


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 224


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 225


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 226


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 227


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 228


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
=================================================
Progress: 229


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 230


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 2(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 1(rank:22.)
rewrite <- Case3 in goal at 2(rank:22.)
rewrite <- Case2 in goal at 1(rank:22.)
=================================================
Progress: 231


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 232


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 233


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case2 in goal at 2(rank:14.)
rewrite Case2 in goal at 0(rank:14.)
rewrite Case2 in goal at 1(rank:14.)
=================================================
Progress: 234


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 235


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 236


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 237


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 238


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 239


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 240


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (SUCC (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 241


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 242


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 243


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 244


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 245


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 246


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 247


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 248


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 249


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 250


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 251


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 252


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 253


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 254


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 255


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 256


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 257


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 258


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 259


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 2(rank:14.)
rewrite Case1 in goal at 0(rank:14.)
rewrite Case1 in goal at 1(rank:14.)
=================================================
Progress: 260


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 261


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 262


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 263


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 264


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 265


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 266


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 267


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 268


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 269


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 270


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 271


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 272


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 273


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 274


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 275


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 276


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 277


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 278


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 279


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 280


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 281


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 282


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 283


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 284


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 285


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:6.)
=================================================
Progress: 286


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 287


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO))))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 288


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 289


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 290


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 291


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 292


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 293


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 294


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 295


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 296


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 297


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 298


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 299


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 300


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 301


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 302


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 303


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 304


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 305


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 306


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO))) (Leaf (ZERO)))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (SUCC (SUCC (SUCC (ZERO))))))))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 307


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 308


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 309


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case1 in goal at 2(rank:14.)
rewrite Case1 in goal at 0(rank:14.)
rewrite Case1 in goal at 1(rank:14.)
=================================================
Progress: 310


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 311


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 312


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 313


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 314


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 315


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))))) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 316


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 317


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 2(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 1(rank:22.)
rewrite <- Case3 in goal at 2(rank:22.)
rewrite <- Case2 in goal at 1(rank:22.)
=================================================
Progress: 318


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 319


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 320


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 321


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 322


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 323


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 324


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 325


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 326


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 327


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 328


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
=================================================
Progress: 329


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 330


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 331


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case2 in goal at 2(rank:14.)
rewrite Case2 in goal at 0(rank:14.)
rewrite Case2 in goal at 1(rank:14.)
=================================================
Progress: 332


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 333


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 334


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 335


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 336


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 337


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 338


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 339


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 340


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 341


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 342


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 343


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 344


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 345


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 346


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 347


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 348


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
=================================================
Progress: 349


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 350


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:6.)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 351


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 352


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 353


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 354


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 355


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 356


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 357


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))))))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO)))))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 358


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 359


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case1 in goal at 2(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 1(rank:22.)
rewrite <- Case3 in goal at 2(rank:22.)
rewrite <- Case1 in goal at 1(rank:22.)
=================================================
Progress: 360


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 361


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 362


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 363


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : lq (nat2) (nat1) = true
Cond3 : gq (nat3) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
Case2 : gq (nat3) (nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:22.)
rewrite Cond2 in goal at 2(rank:29.)
rewrite Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 1(rank:29.)
=================================================
Progress: 364


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 365


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 366


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
Case2 : gq (nat3) (nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:22.)
rewrite Cond3 in goal at 2(rank:29.)
rewrite Cond3 in goal at 0(rank:29.)
rewrite Cond3 in goal at 1(rank:29.)
=================================================
Progress: 367


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 368


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 369


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : lq (nat3) (nat1) = true
Cond2 : gq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
Case2 : gq (nat3) (nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:22.)
rewrite Cond4 in goal at 2(rank:29.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite Cond4 in goal at 1(rank:29.)
=================================================
Progress: 370


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 371


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond3 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 372


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : lq (nat2) (nat1) = true
Cond4 : gq (nat2) (nat3) = true
Case1 : gq (nat2) (nat1) = true
Case2 : gq (nat3) (nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:22.)
rewrite Cond3 in goal at 2(rank:29.)
rewrite Cond3 in goal at 0(rank:29.)
rewrite Cond3 in goal at 1(rank:29.)
=================================================
Progress: 373


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 374


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 375


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : lq (nat3) (nat1) = true
Cond3 : gq (nat2) (nat3) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
Case2 : gq (nat3) (nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:22.)
rewrite Cond4 in goal at 2(rank:29.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite Cond4 in goal at 1(rank:29.)
=================================================
Progress: 376


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (if gq (nat2) (nat1) then nat2 else nat1) then nat3 else if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat2) (nat1)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
Case2 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 377


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
Case2 : lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (nat2)(rank:22.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite <- Case2 in goal at 0(rank:37.)
rewrite <- Cond1 in goal at 0(rank:37.)
rewrite <- Cond2 in goal at 0(rank:37.)
rewrite <- Cond3 in goal at 0(rank:37.)
rewrite <- Case1 in goal at 0(rank:37.)
rewrite <- Cond4 in goal at 0(rank:37.)
=================================================
Progress: 378


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
---------------------------------------
Tuple2 (if gq (nat3) (nat2) then nat3 else if true then nat2 else nat1) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (nat2)(rank : 21.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (nat1)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (nat1) = true
Cond2 : gq (nat2) (nat3) = true
Cond3 : lq (nat3) (nat1) = true
Cond4 : lq (nat2) (nat1) = true
Case1 : gq (nat2) (nat1) = true
Case2 : gq (nat3) (nat2) = true
---------------------------------------
Tuple2 (nat3) (if lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2) then if lq (nat2) (nat1) then nat1 else nat2 else nat3) = Tuple2 (nat2) (nat1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (nat3) (if lq (nat2) (nat1) then nat1 else nat2)(rank:22.)
rewrite Cond4 in goal at 2(rank:29.)
rewrite Cond4 in goal at 0(rank:29.)
rewrite Cond4 in goal at 1(rank:29.)
=================================================
Progress: 379


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 380


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 381


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 382


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 383


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 1
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 384


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 385


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 386


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 387


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 388


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 389


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 2
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 390


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 391


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 392


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case2 in goal at 0(rank:14.)
=================================================
Progress: 393


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 394


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 395


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 1
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 396


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 397


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 398


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 399


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 400


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 401


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 2
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 402


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:22.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 403


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 404


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 405


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 406


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (SUCC (SUCC (ZERO)))))) (Leaf (SUCC (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 407


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 408


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 409


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 410


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 411


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 412


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 413


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 414


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 415


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
=================================================
Progress: 416


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 417


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:23.)
rewrite <- Case3 in goal at 0(rank:23.)
rewrite <- Case4 in goal at 0(rank:23.)
=================================================
Progress: 418


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b) (SUCC (SUCC (ZERO))) then if gq (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) then SUCC (SUCC (ZERO)) else match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) then ZERO else match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if true then SUCC (ZERO) else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 419


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 420


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 421


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 422


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 423


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 424


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 425


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 426


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 427


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 428


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 429


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 430


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 431


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 432


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 433


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 434


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 435


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 436


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 437


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 438


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 439


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond1 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 440


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond1 in goal at 0(rank:24.)
rewrite Cond2 in goal at 0(rank:32.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 441


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 17
case gq (nat4) (nat3)(rank:18.)
rewrite Cond1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
=================================================
Progress: 442


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 18
case gq (nat4) (nat3)(rank:18.)
rewrite Cond1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite Cond2 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
=================================================
Progress: 443


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite Cond1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:34.)
rewrite <- Cond1 in goal at 0(rank:34.)
rewrite <- Cond2 in goal at 0(rank:34.)
rewrite <- Cond3 in goal at 0(rank:34.)
rewrite <- Case3 in goal at 0(rank:34.)
rewrite <- Case1 in goal at 0(rank:34.)
=================================================
Progress: 444


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:26.)
rewrite <- Cond3 in goal at 0(rank:26.)
rewrite Cond1 in goal at 0(rank:34.)
rewrite Cond2 in goal at 0(rank:34.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 445


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 446


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 447


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 448


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 449


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 450


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 451


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 452


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 453


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 454


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 455


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 456


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond1 in goal at 0(rank:24.)
rewrite Cond3 in goal at 0(rank:32.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 457


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 18
case gq (nat4) (nat3)(rank:18.)
rewrite Cond1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite Cond3 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
=================================================
Progress: 458


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : lq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:34.)
rewrite <- Case3 in goal at 0(rank:34.)
rewrite <- Cond1 in goal at 0(rank:34.)
rewrite <- Cond2 in goal at 0(rank:34.)
rewrite <- Cond3 in goal at 0(rank:34.)
rewrite <- Case2 in goal at 0(rank:34.)
rewrite Cond1 in goal at 0(rank:34.)
=================================================
Progress: 459


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 460


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 461


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 462


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 463


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 464


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 465


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
=================================================
Progress: 466


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 467


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:23.)
rewrite <- Case3 in goal at 0(rank:23.)
rewrite <- Case4 in goal at 0(rank:23.)
=================================================
Progress: 468


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then SUCC (ZERO) else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b) (ZERO) then if lq (match (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b else match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then SUCC (ZERO) else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if true then SUCC (ZERO) else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO)))))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO)))))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 469


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 470


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 471


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 472


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 473


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:15.)
=================================================
Progress: 474


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:15.)
=================================================
Progress: 475


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 476


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 477


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:16.)
=================================================
Progress: 478


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:16.)
=================================================
Progress: 479


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16.)
=================================================
Progress: 480


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16.)
=================================================
Progress: 481


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:16.)
=================================================
Progress: 482


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:16.)
=================================================
Progress: 483


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 484


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 485


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 486


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 487


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 488


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 489


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 490


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 491


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 492


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 493


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 494


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 495


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 496


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 497


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 498


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 499


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 500


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 501


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 502


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 503


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 504


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 505


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 506


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 507


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 508


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 509


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 510


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 511


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 512


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 513


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 514


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 515


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 516


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 517


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 518


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 519


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 520


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 521


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 522


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 523


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond2 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 524


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond2 in goal at 1(rank:24.)
rewrite Cond2 in goal at 2(rank:32.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite Cond2 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 525


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 17
case gq (nat4) (nat3)(rank:18.)
rewrite Cond2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
=================================================
Progress: 526


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 19
case gq (nat4) (nat3)(rank:18.)
rewrite Cond2 in goal at 0(rank:25.)
rewrite Cond2 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite Cond2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
=================================================
Progress: 527


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite Cond2 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:34.)
rewrite <- Cond1 in goal at 0(rank:34.)
rewrite <- Cond2 in goal at 0(rank:34.)
rewrite <- Cond3 in goal at 0(rank:34.)
rewrite <- Case3 in goal at 0(rank:34.)
rewrite <- Case1 in goal at 0(rank:34.)
=================================================
Progress: 528


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:26.)
rewrite Cond2 in goal at 0(rank:34.)
rewrite Cond2 in goal at 1(rank:34.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Cond3 in goal at 0(rank:26.)
rewrite Cond2 in goal at 2(rank:34.)
=================================================
Progress: 529


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) then SUCC (ZERO) else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 _ b -> b) (SUCC (SUCC (ZERO))) then if true then SUCC (SUCC (ZERO)) else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 _ b -> b)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 530


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 531


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 532


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:15.)
=================================================
Progress: 533


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 534


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:16.)
=================================================
Progress: 535


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16.)
=================================================
Progress: 536


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:16.)
=================================================
Progress: 537


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 538


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (nat3) = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 539


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 540


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 541


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 542


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 543


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 544


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 545


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 546


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 547


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 548


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 549


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
false = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 550


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 551


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 552


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 553


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 554


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 555


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 556


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 557


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond2 in goal at 0(rank:24.)
rewrite Cond3 in goal at 0(rank:32.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 558


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 18
case gq (nat4) (nat3)(rank:18.)
rewrite Cond2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite Cond3 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
=================================================
Progress: 559


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : lq (nat4) (SUCC (nat2)) = true
Cond3 : gq (nat3) (nat4) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:34.)
rewrite <- Case3 in goal at 0(rank:34.)
rewrite <- Cond1 in goal at 0(rank:34.)
rewrite <- Cond2 in goal at 0(rank:34.)
rewrite <- Cond3 in goal at 0(rank:34.)
rewrite <- Case2 in goal at 0(rank:34.)
rewrite Cond2 in goal at 0(rank:34.)
=================================================
Progress: 560


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
=================================================
Progress: 561


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 562


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:23.)
rewrite <- Case3 in goal at 0(rank:23.)
rewrite <- Case4 in goal at 0(rank:23.)
=================================================
Progress: 563


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if gq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then SUCC (ZERO) else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (SUCC (SUCC (ZERO)))) then if true then SUCC (SUCC (SUCC (ZERO))) else match (reprNew (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if true then SUCC (ZERO) else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 564


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 565


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 566


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 567


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 568


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:15.)
=================================================
Progress: 569


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:15.)
=================================================
Progress: 570


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 571


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 572


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:16.)
=================================================
Progress: 573


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:16.)
=================================================
Progress: 574


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16.)
=================================================
Progress: 575


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16.)
=================================================
Progress: 576


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:16.)
=================================================
Progress: 577


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:16.)
=================================================
Progress: 578


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:16.)
=================================================
Progress: 579


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:16.)
=================================================
Progress: 580


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 581


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 582


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 583


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 584


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 585


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 586


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 587


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 588


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 589


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 590


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 591


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 592


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 593


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 594


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 595


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 596


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 597


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 598


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 599


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 600


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 601


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 602


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 603


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 604


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 605


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 606


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 607


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 608


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 609


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 610


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 611


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 612


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 613


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 614


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 615


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 616


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 617


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 618


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 619


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 620


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 621


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 622


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 623


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 624


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 625


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 626


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if true then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond3 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 627


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond3 in goal at 0(rank:24.)
rewrite Cond2 in goal at 0(rank:32.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 628


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 17
case gq (nat4) (nat3)(rank:18.)
rewrite Cond3 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
=================================================
Progress: 629


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 18
case gq (nat4) (nat3)(rank:18.)
rewrite Cond3 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite Cond2 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
=================================================
Progress: 630


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if true then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (SUCC (nat2))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite Cond3 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:34.)
rewrite <- Cond1 in goal at 0(rank:34.)
rewrite <- Cond2 in goal at 0(rank:34.)
rewrite <- Cond3 in goal at 0(rank:34.)
rewrite <- Case3 in goal at 0(rank:34.)
rewrite <- Case1 in goal at 0(rank:34.)
=================================================
Progress: 631


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if gq (nat3) (nat4) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:34.)
rewrite <- Case3 in goal at 0(rank:34.)
rewrite <- Cond1 in goal at 0(rank:34.)
rewrite <- Cond2 in goal at 0(rank:34.)
rewrite <- Cond3 in goal at 0(rank:34.)
rewrite <- Case2 in goal at 0(rank:34.)
rewrite Cond3 in goal at 0(rank:34.)
=================================================
Progress: 632


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if lq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if lq (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (SUCC (ZERO))) then if true then SUCC (SUCC (ZERO)) else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 633


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case2 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 634


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 635


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:15.)
=================================================
Progress: 636


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 637


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:16.)
=================================================
Progress: 638


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree2)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16.)
=================================================
Progress: 639


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Leaf (nat3))) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:16.)
=================================================
Progress: 640


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:16.)
=================================================
Progress: 641


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 642


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base3 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3) = Tuple2 (nat2) (nat2)

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 643


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (Node (nat3) (tree3) (tree4))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (Node (nat3) (tree3) (tree4))) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 644


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 645


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 646


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
Base2 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3)) = Tuple2 (nat2) (nat2)
IH2 : gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (nat2) (match (reprNew (tree4)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree4)) = Tuple2 (nat2) (nat2)
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (nat2) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (if gq (nat2) (ZERO) then nat2 else ZERO) then nat3 else if gq (nat2) (ZERO) then nat2 else ZERO) (if lq (nat3) (nat2) then nat2 else nat3)) (repr (tree3))) (repr (tree4)) = Tuple2 (nat2) (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 647


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (nat2) (tree3) (tree4)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 a _ -> a) (match (reprNew (Node (nat2) (tree3) (tree4))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 648


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 649


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Leaf (nat3))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 650


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
gq (nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 651


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true->false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 652


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : gq (nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (nat3) = true
---------------------------------------
false = true -> Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 653


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (Node (nat3) (tree5) (tree6))) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (Node (nat3) (tree5) (tree6))) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 654


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
---------------------------------------
gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 655


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
---------------------------------------
gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true->false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 656


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree3))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH2 : forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (match (reprNew (tree4)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
tree2 : tree
nat3 : nat
tree5 : tree
tree6 : tree
IH3 : gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree5)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree5)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
IH4 : gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (ZERO) = true->gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (match (reprNew (tree6)) with
| Tuple2 a _ -> a) = true->false = true -> g (Tuple2 (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b)) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive2 : tree2 = Node (nat3) (tree5) (tree6)
Cond1 : gq (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) (ZERO) = true
Cond2 : gq (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if gq (match (reprNew (tree5)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) then match (reprNew (tree5)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree6)) with
| Tuple2 a _ -> a) (nat3) then match (reprNew (tree6)) with
| Tuple2 a _ -> a else nat3) = true
---------------------------------------
false = true -> g (g (Tuple2 (if gq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) then nat3 else match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 a _ -> a) (if lq (nat3) (match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b) then match (g (g (Tuple2 (if gq (nat2) (ZERO) then nat2 else ZERO) (nat2)) (repr (tree3))) (repr (tree4))) with
| Tuple2 _ b -> b else nat3)) (repr (tree5))) (repr (tree6)) = Tuple2 (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree4)) with
| Tuple2 a _ -> a) (nat2) then match (reprNew (tree4)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b) then if lq (match (reprNew (tree4)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree4)) with
| Tuple2 _ b -> b else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 657


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 658


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 659


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 660


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 661


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
gq (nat4) (SUCC (nat2)) = true->gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 662


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
---------------------------------------
gq (nat3) (nat4) = true->lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 663


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
---------------------------------------
lq (nat4) (SUCC (nat2)) = true -> Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (SUCC (nat2))(rank:16.)
=================================================
Progress: 664


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3) then if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat3) (SUCC (nat2)) then if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (SUCC (nat2))(rank : 16.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case gq (nat3) (SUCC (nat2))(rank:17.)
rewrite Cond3 in goal at 1(rank:24.)
rewrite Cond3 in goal at 2(rank:32.)
rewrite <- Case1 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:32.)
rewrite <- Cond2 in goal at 0(rank:32.)
rewrite Cond3 in goal at 0(rank:32.)
rewrite <- Cond3 in goal at 0(rank:32.)
=================================================
Progress: 665


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) then nat4 else if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

3 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat3) (SUCC (nat2))(rank : 17.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 19
case gq (nat4) (nat3)(rank:18.)
rewrite Cond3 in goal at 0(rank:25.)
rewrite Cond3 in goal at 2(rank:33.)
rewrite <- Case1 in goal at 1(rank:33.)
rewrite <- Case1 in goal at 2(rank:33.)
rewrite <- Case2 in goal at 0(rank:33.)
rewrite <- Case2 in goal at 1(rank:33.)
rewrite <- Case1 in goal at 0(rank:33.)
rewrite Cond3 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:33.)
rewrite <- Cond1 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 0(rank:33.)
rewrite <- Cond2 in goal at 1(rank:33.)
rewrite <- Cond2 in goal at 2(rank:33.)
rewrite <- Cond3 in goal at 0(rank:33.)
rewrite <- Cond1 in goal at 2(rank:33.)
rewrite <- Cond1 in goal at 0(rank:33.)
rewrite <- Cond3 in goal at 1(rank:33.)
rewrite <- Cond3 in goal at 2(rank:33.)
=================================================
Progress: 666


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
---------------------------------------
Tuple2 (if gq (nat4) (nat3) then nat4 else if true then nat3 else SUCC (nat2)) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

4 goal(s) more...

1 conjecture(s) more...
>>> case gq (nat4) (nat3)(rank : 18.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b else match (reprNew (tree1)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
Cond1 : gq (nat4) (SUCC (nat2)) = true
Cond2 : gq (nat3) (nat4) = true
Cond3 : lq (nat4) (SUCC (nat2)) = true
Case1 : lq (nat3) (SUCC (nat2)) = true
Case2 : gq (nat3) (SUCC (nat2)) = true
Case3 : gq (nat4) (nat3) = true
---------------------------------------
Tuple2 (nat4) (if lq (nat4) (SUCC (nat2)) then if true then SUCC (nat2) else nat3 else nat4) = Tuple2 (nat3) (if lq (nat4) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Cond1 in goal at 0(rank:26.)
rewrite <- Cond2 in goal at 0(rank:26.)
rewrite Cond3 in goal at 0(rank:34.)
rewrite Cond3 in goal at 1(rank:34.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Cond3 in goal at 0(rank:26.)
rewrite Cond3 in goal at 2(rank:34.)
=================================================
Progress: 667


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 668


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 669


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 670


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 671


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 672


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 673


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 674


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 675


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 676


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 677


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 678


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 679


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 680


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 681


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 682


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 683


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 684


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 685


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 686


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 687


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 688


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 689


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 690


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (SUCC (ZERO)))) (SUCC (SUCC (SUCC (ZERO))))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO))))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 691


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 692


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 693


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 694


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 695


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 696


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 697


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 698


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 699


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 700


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 701


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 702


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 703


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 704


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 705


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 706


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 707


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 708


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 709


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank:7.)
=================================================
Progress: 710


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:7.)
=================================================
Progress: 711


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:23.)
rewrite <- Case3 in goal at 0(rank:23.)
rewrite <- Case4 in goal at 0(rank:23.)
=================================================
Progress: 712


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (SUCC (ZERO))) then if gq (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) then SUCC (SUCC (ZERO)) else match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) then ZERO else match (reprNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b) (SUCC (SUCC (ZERO))) then if true then SUCC (SUCC (ZERO)) else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if true then SUCC (ZERO) else match (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (ZERO)))) with
| Tuple2 _ b -> b)
=================================================
Progress: 713


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b) (ZERO) then if gq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then ZERO else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then SUCC (ZERO) else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then if gq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) then SUCC (ZERO) else match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
=================================================
Progress: 714


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 715


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
simpl in goal
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 716


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 717


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
simpl in goal
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 718


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 719


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (nat1)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case3 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
rewrite Case1 in goal at 0
simpl in goal
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 720


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 721


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 722


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 723


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 724


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:6.)
=================================================
Progress: 725


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 726


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:7.)
=================================================
Progress: 727


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 728


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 1
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))
=================================================
Progress: 729


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
rewrite <- Case3 in goal at 0(rank:22.)
=================================================
Progress: 730


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7.)
=================================================
Progress: 731


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 732


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 2
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (SUCC (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO)
=================================================
Progress: 733


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 734


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:7.)
=================================================
Progress: 735


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 736


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
Case4 : gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
case gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) = Tuple2 (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO))
=================================================
Progress: 737


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 22.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 1
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else SUCC (ZERO)) (if true then SUCC (ZERO) else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (SUCC (ZERO)) then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) (if true then SUCC (ZERO) else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) (if true then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (SUCC (ZERO))))) = Tuple2 (if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else if true then match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a else SUCC (ZERO)) (if true then SUCC (ZERO) else match (reprNew (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (ZERO)) (SUCC (ZERO))) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (if gq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a else if true then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else SUCC (ZERO)) (if true then SUCC (ZERO) else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) = Tuple2 (if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else if true then match (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a else ZERO) (if true then ZERO else match (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 _ b -> b)
previous tactics
simpl in goal
case lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1)
rewrite <- Case1 in goal at 0
case gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1)
case lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1)
validate generalize_common_subterm_goal
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else if true then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Leaf (ZERO)))) with
| Tuple2 _ b -> b)) (repr (Leaf (SUCC (ZERO)))) = Tuple2 (if gq (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else if true then match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a else ZERO) (if lq (match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (Leaf (SUCC (ZERO)))) with
| Tuple2 _ b -> b)
Prop: g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 _ b -> b)) (repr (Leaf (ZERO))) = Tuple2 (if gq (match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a) then match (reprNew (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a else if true then match (reprNew (Leaf (ZERO))) with
| Tuple2 a _ -> a else ZERO) (if lq (match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (Leaf (ZERO))) with
| Tuple2 _ b -> b)
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 738


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 739


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 740


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : match (repr (tree2)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : match (repr (tree3)) with
| Leaf n -> Tuple2 (n) (n)
| Node n t1 t2 -> g (Tuple2 (fst2 (g (Tuple2 (n) (n)) (t1))) (snd2 (g (Tuple2 (n) (n)) (t1)))) (t2) = Tuple2 (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (reprNew (tree3)) with
| Tuple2 _ b -> b) (nat1) = true
Case2 : gq (match (reprNew (tree3)) with
| Tuple2 a _ -> a) (nat1) = true
Case3 : lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true
---------------------------------------
g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree2))) with
| Tuple2 _ b -> b)) (repr (tree3)) = Tuple2 (if gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (match (reprNew (tree3)) with
| Tuple2 a _ -> a) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree3)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree3)) with
| Tuple2 _ b -> b)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 741


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:13.)
=================================================
Progress: 742


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 743


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 744


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else ZERO) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 745


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else ZERO) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) then ZERO else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 746


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else ZERO) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 747


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (ZERO) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (ZERO) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) = true -> g (Tuple2 (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (ZERO) (ZERO)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (ZERO) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else ZERO) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (SUCC (nat2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:14.)
=================================================
Progress: 748


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 749


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 750


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (nat2)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (SUCC (nat2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (nat2)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (SUCC (nat2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 751


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (Leaf (nat2))) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (Leaf (nat2)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (if gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 752


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (nat3) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (if gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 753


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (nat2)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true -> g (Tuple2 (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (SUCC (nat2)) (SUCC (nat2))) (repr (Leaf (nat3)))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (SUCC (nat2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (nat2)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (nat3) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (if gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else if lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (SUCC (nat2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:15.)
=================================================
Progress: 754


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (tree2)) = Tuple2 (if gq (nat2) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if true then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
lq (match (reprNew (Leaf (nat3))) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = true->lq (nat2) (nat1) = true -> g (Tuple2 (if gq (nat2) (nat1) then nat2 else nat1) (if lq (nat2) (nat1) then nat1 else nat2)) (repr (Leaf (nat3))) = Tuple2 (if gq (nat2) (match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat2))) with
| Tuple2 a _ -> a else if true then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else nat1) (nat1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 755


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
---------------------------------------
forall (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (nat3) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (tree2)) = Tuple2 (if gq (nat3) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else SUCC (nat2)) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (tree2)) with
| Tuple2 _ b -> b)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 15.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat1) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat1) = true -> g (Tuple2 (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat1) (nat1)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat1) then nat1 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree) (tree2:tree), lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) = true->gq (match (reprNew (tree2)) with
| Tuple2 a _ -> a) (nat2) = true->lq (match (reprNew (tree1)) with
| Tuple2 _ b -> b) (nat2) = true -> g (Tuple2 (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 a _ -> a) (match (g (Tuple2 (nat2) (nat2)) (repr (tree1))) with
| Tuple2 _ b -> b)) (repr (tree2)) = Tuple2 (if gq (match (reprNew (tree1)) with
| Tuple2 a _ -> a) (match (reprNew (tree2)) with
| Tuple2 a _ -> a) then match (reprNew (tree1)) with
| Tuple2 a _ -> a else if true then match (reprNew (tree2)) with
| Tuple2 a _ -> a else nat2) (if lq (match (reprNew (tree2)) with
| Tuple2 _ b -> b) (nat2) then nat2 else match (reprNew (tree2)) with
| Tuple2 _ b -> b)
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
Base1 : tree1 = Leaf (nat3)
tree2 : tree
nat4 : nat
Base2 : tree2 = Leaf (nat4)
---------------------------------------
lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) = true->gq (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) (SUCC (nat2)) = true->lq (nat3) (SUCC (nat2)) = true -> g (Tuple2 (if gq (nat3) (SUCC (nat2)) then nat3 else SUCC (nat2)) (if lq (nat3) (SUCC (nat2)) then SUCC (nat2) else nat3)) (repr (Leaf (nat4))) = Tuple2 (if gq (nat3) (match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a) then match (reprNew (Leaf (nat3))) with
| Tuple2 a _ -> a else if true then match (reprNew (Leaf (nat4))) with
| Tuple2 a _ -> a else SUCC (nat2)) (if lq (match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b) (SUCC (nat2)) then SUCC (nat2) else match (reprNew (Leaf (nat4))) with
| Tuple2 _ b -> b)

2 goal(s) more...

1 conjecture(s) more...
