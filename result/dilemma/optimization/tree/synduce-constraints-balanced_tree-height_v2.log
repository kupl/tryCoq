Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if balanced (tree1) then height (target (tree1)) else ZERO = if balanced (tree1) then targetNew (tree1) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction tree1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if balanced (tree1) then height (target (tree1)) else ZERO = if balanced (tree1) then targetNew (tree1) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> induction tree1(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Base1 : tree1 = Leaf
---------------------------------------
if balanced (Leaf) then height (target (Leaf)) else ZERO = if balanced (Leaf) then targetNew (Leaf) else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Base1 : tree1 = Leaf
---------------------------------------
if balanced (Leaf) then height (target (Leaf)) else ZERO = if balanced (Leaf) then targetNew (Leaf) else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if balanced (Node (nat1) (tree2) (tree3)) then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if balanced (Node (nat1) (tree2) (tree3)) then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if balanced (Node (nat1) (tree2) (tree3)) then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if balanced (Node (nat1) (tree2) (tree3)) then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case nat_eq (height (tree2)) (height (tree3))(rank:4.)
=================================================
Progress: 6


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> case nat_eq (height (tree2)) (height (tree3))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
---------------------------------------
if if balanced (tree2) then balanced (tree3) else false then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if if balanced (tree2) then balanced (tree3) else false then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case balanced (tree2)(rank:5.)
=================================================
Progress: 7


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
---------------------------------------
if if balanced (tree2) then balanced (tree3) else false then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if if balanced (tree2) then balanced (tree3) else false then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> case balanced (tree2)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
---------------------------------------
if balanced (tree3) then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if balanced (tree3) then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case balanced (tree3)(rank:6.)
=================================================
Progress: 8


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
---------------------------------------
if balanced (tree3) then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if balanced (tree3) then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

2 goal(s) more...

0 conjecture(s) more...
>>> case balanced (tree3)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
---------------------------------------
SUCC (if lq (height (target (tree2))) (height (tree3)) then height (tree3) else height (target (tree2))) = plus (targetNew (tree2)) (if lq (targetNew (tree2)) (SUCC (ZERO)) then SUCC (ZERO) else targetNew (tree2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (targetNew (tree2)) (SUCC (ZERO))(rank:7.)
rewrite IH1 in goal at 0(rank:14.)
rewrite IH1 in goal at 2(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 1(rank:14.)
rewrite <- IH1 in goal at 2(rank:14.)
rewrite IH1 in goal at 1(rank:14.)
case lq (height (target (tree2))) (height (tree3))(rank:7.)
rewrite <- IH1 in goal at 3(rank:14.)
=================================================
Progress: 9


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
---------------------------------------
SUCC (if lq (height (target (tree2))) (height (tree3)) then height (tree3) else height (target (tree2))) = plus (targetNew (tree2)) (if lq (targetNew (tree2)) (SUCC (ZERO)) then SUCC (ZERO) else targetNew (tree2))

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (targetNew (tree2)) (SUCC (ZERO))(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
Case4 : lq (targetNew (tree2)) (SUCC (ZERO)) = true
---------------------------------------
SUCC (if lq (height (target (tree2))) (height (tree3)) then height (tree3) else height (target (tree2))) = plus (targetNew (tree2)) (SUCC (ZERO))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (height (target (tree2))) (height (tree3))(rank:8.)
rewrite IH1 in goal at 0(rank:15.)
rewrite IH1 in goal at 1(rank:15.)
rewrite IH1 in goal at 2(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 10


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
---------------------------------------
SUCC (if lq (height (target (tree2))) (height (tree3)) then height (tree3) else height (target (tree2))) = plus (targetNew (tree2)) (if lq (targetNew (tree2)) (SUCC (ZERO)) then SUCC (ZERO) else targetNew (tree2))

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (target (tree2))) (height (tree3))(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
Case4 : lq (height (target (tree2))) (height (tree3)) = true
---------------------------------------
SUCC (height (tree3)) = plus (targetNew (tree2)) (if lq (targetNew (tree2)) (SUCC (ZERO)) then SUCC (ZERO) else targetNew (tree2))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (targetNew (tree2)) (SUCC (ZERO))(rank:8.)
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 2(rank:23.)
rewrite <- IH1 in goal at 3(rank:23.)
=================================================
Progress: 11


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
Case4 : lq (targetNew (tree2)) (SUCC (ZERO)) = true
---------------------------------------
SUCC (if lq (height (target (tree2))) (height (tree3)) then height (tree3) else height (target (tree2))) = plus (targetNew (tree2)) (SUCC (ZERO))

4 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (target (tree2))) (height (tree3))(rank : 8.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
Case4 : lq (targetNew (tree2)) (SUCC (ZERO)) = true
Case5 : lq (height (target (tree2))) (height (tree3)) = true
---------------------------------------
SUCC (height (tree3)) = plus (targetNew (tree2)) (SUCC (ZERO))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:8.)
=================================================
Progress: 12


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
Case4 : lq (height (target (tree2))) (height (tree3)) = true
---------------------------------------
SUCC (height (tree3)) = plus (targetNew (tree2)) (if lq (targetNew (tree2)) (SUCC (ZERO)) then SUCC (ZERO) else targetNew (tree2))

4 goal(s) more...

0 conjecture(s) more...
>>> case lq (targetNew (tree2)) (SUCC (ZERO))(rank : 8.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
Case4 : lq (height (target (tree2))) (height (tree3)) = true
Case5 : lq (targetNew (tree2)) (SUCC (ZERO)) = true
---------------------------------------
SUCC (height (tree3)) = plus (targetNew (tree2)) (SUCC (ZERO))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:8.)
=================================================
Progress: 13


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
Case4 : lq (targetNew (tree2)) (SUCC (ZERO)) = true
Case5 : lq (height (target (tree2))) (height (tree3)) = true
---------------------------------------
SUCC (height (tree3)) = plus (targetNew (tree2)) (SUCC (ZERO))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 8.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : height (target (tree2)) = targetNew (tree2)
IH2 : height (target (tree3)) = targetNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : nat_eq (height (tree2)) (height (tree3)) = true
Case2 : balanced (tree2) = true
Case3 : balanced (tree3) = true
Case4 : lq (targetNew (tree2)) (SUCC (ZERO)) = true
Case5 : lq (height (target (tree2))) (height (tree3)) = true
---------------------------------------
SUCC (height (tree3)) = plus (height (target (tree2))) (SUCC (ZERO))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case nat_eq (height (tree2)) (height (tree3))
case balanced (tree2)
case balanced (tree3)
case lq (targetNew (tree2)) (SUCC (ZERO))
case lq (height (target (tree2))) (height (tree3))
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Fatal error: exception Failure("pattern matching is ill-formed")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Proof.simplify_expr.(fun) in file "lib/proof.ml", line 1247, characters 49-82
Called from Stdlib__List.fold_left in file "list.ml", line 123, characters 24-34
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", lines 1239-1274, characters 6-13
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1231, characters 27-53
Called from Dilemma__Proof.simplify_prop in file "lib/proof.ml", line 1304, characters 13-33
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Stdlib__List.map in file "list.ml", line 88, characters 14-21
Called from Dilemma__Validate.validate in file "lib/validate.ml", line 146, characters 4-79
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1291, characters 19-63
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1358, characters 37-57
Called from Dilemma__Finder.find_lemma.(fun) in file "lib/finder.ml", line 1388, characters 15-36
Called from Stdlib__List.fold_left in file "list.ml", line 123, characters 24-34
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", lines 1386-1392, characters 4-12
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 219, characters 30-73
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
