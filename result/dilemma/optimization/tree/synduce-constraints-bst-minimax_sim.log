Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if tf4 (tree1) then tf6 (tf8 (tree1)) else Tuple2 (ZERO) (ZERO) = if tf4 (tree1) then Tuple2 (match (tf11 (tree1)) with
| Tuple2 a _ -> a) (match (tf11 (tree1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro tree1(rank:3.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if tf4 (tree1) then tf6 (tf8 (tree1)) else Tuple2 (ZERO) (ZERO) = if tf4 (tree1) then Tuple2 (match (tf11 (tree1)) with
| Tuple2 a _ -> a) (match (tf11 (tree1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> intro tree1(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
---------------------------------------
if tf4 (tree1) then tf6 (tf8 (tree1)) else Tuple2 (ZERO) (ZERO) = if tf4 (tree1) then Tuple2 (match (tf11 (tree1)) with
| Tuple2 a _ -> a) (match (tf11 (tree1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case tf4 (tree1)(rank:4.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
---------------------------------------
if tf4 (tree1) then tf6 (tf8 (tree1)) else Tuple2 (ZERO) (ZERO) = if tf4 (tree1) then Tuple2 (match (tf11 (tree1)) with
| Tuple2 a _ -> a) (match (tf11 (tree1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> case tf4 (tree1)(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Case1 : tf4 (tree1) = true
---------------------------------------
tf6 (tf8 (tree1)) = Tuple2 (match (tf11 (tree1)) with
| Tuple2 a _ -> a) (match (tf11 (tree1)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Fatal error: exception Failure("pattern matching is ill-formed")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Proof.simplify_expr.(fun) in file "lib/proof.ml", line 1582, characters 53-86
Called from Stdlib__List.fold_left in file "list.ml", line 123, characters 24-34
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", lines 1572-1608, characters 6-13
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1564, characters 27-53
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1570, characters 21-60
Called from Stdlib__List.map in file "list.ml", line 87, characters 15-19
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1518, characters 15-48
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1564, characters 27-53
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1564, characters 27-53
Called from Stdlib__List.map in file "list.ml", line 87, characters 15-19
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1518, characters 15-48
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1518, characters 15-48
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1564, characters 27-53
Called from Dilemma__Proof.simplify_expr in file "lib/proof.ml", line 1564, characters 27-53
Called from Dilemma__Proof.simplify_prop in file "lib/proof.ml", line 1638, characters 13-33
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Stdlib__List.map in file "list.ml", line 87, characters 15-19
Called from Dilemma__Validate.validate in file "lib/validate.ml", line 146, characters 4-79
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1279, characters 19-63
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1346, characters 37-57
Called from Dilemma__Finder.find_lemma.(fun) in file "lib/finder.ml", line 1376, characters 15-36
Called from Stdlib__List.fold_left in file "list.ml", line 123, characters 24-34
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", lines 1374-1380, characters 4-12
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 219, characters 30-73
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 284, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
