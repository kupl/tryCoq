Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if isbst (tree1) then spec (target (tree1)) else Tuple2 (ZERO) (ZERO) = if isbst (tree1) then Tuple2 (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (match (targetNew (tree1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction tree1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if isbst (tree1) then spec (target (tree1)) else Tuple2 (ZERO) (ZERO) = if isbst (tree1) then Tuple2 (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (match (targetNew (tree1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> induction tree1(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
Base1 : tree1 = Leaf (nat1)
---------------------------------------
if isbst (Leaf (nat1)) then spec (target (Leaf (nat1))) else Tuple2 (ZERO) (ZERO) = if isbst (Leaf (nat1)) then Tuple2 (match (targetNew (Leaf (nat1))) with
| Tuple2 a _ -> a) (match (targetNew (Leaf (nat1))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
Base1 : tree1 = Leaf (nat1)
---------------------------------------
if isbst (Leaf (nat1)) then spec (target (Leaf (nat1))) else Tuple2 (ZERO) (ZERO) = if isbst (Leaf (nat1)) then Tuple2 (match (targetNew (Leaf (nat1))) with
| Tuple2 a _ -> a) (match (targetNew (Leaf (nat1))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if isbst (Node (nat1) (tree2) (tree3)) then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if isbst (Node (nat1) (tree2) (tree3)) then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if isbst (Node (nat1) (tree2) (tree3)) then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if isbst (Node (nat1) (tree2) (tree3)) then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case geq (nat1) (tmax (tree2))(rank:4.)
=================================================
Progress: 6


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> case geq (nat1) (tmax (tree2))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
---------------------------------------
if if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case leq (nat1) (tmax (tree3))(rank:5.)
=================================================
Progress: 7


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
---------------------------------------
if if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat1) (tmax (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
---------------------------------------
if if isbst (tree2) then isbst (tree3) else false then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if if isbst (tree2) then isbst (tree3) else false then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case isbst (tree2)(rank:6.)
=================================================
Progress: 8


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
---------------------------------------
if if isbst (tree2) then isbst (tree3) else false then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if if isbst (tree2) then isbst (tree3) else false then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

2 goal(s) more...

0 conjecture(s) more...
>>> case isbst (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
---------------------------------------
if isbst (tree3) then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case isbst (tree3)(rank:7.)
=================================================
Progress: 9


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
---------------------------------------
if isbst (tree3) then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

3 goal(s) more...

0 conjecture(s) more...
>>> case isbst (tree3)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:8.)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:8.)
=================================================
Progress: 10


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 8.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:9.)
rewrite <- Case5 in goal at 0(rank:24.)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:9.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Case2 in goal at 0(rank:24.)
rewrite <- Case3 in goal at 0(rank:24.)
rewrite <- Case4 in goal at 0(rank:24.)
=================================================
Progress: 11


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 8.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:9.)
rewrite <- Case5 in goal at 0(rank:24.)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:9.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Case2 in goal at 0(rank:24.)
rewrite <- Case3 in goal at 0(rank:24.)
rewrite <- Case4 in goal at 0(rank:24.)
=================================================
Progress: 12


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 13


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 20
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 14


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
=================================================
Progress: 15


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 20
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 16


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 17


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 18


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 19


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 20


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 21


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 22


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:33.)
=================================================
Progress: 24


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 25


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:33.)
=================================================
Progress: 26


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) (tmax (Leaf (SUCC (ZERO))))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 27


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:33.)
=================================================
Progress: 28


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 29


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:33.)
=================================================
Progress: 30


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 31


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:33.)
=================================================
Progress: 32


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Leaf (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 33


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), geq (nat1) (tmax (tree1)) = true -> leq (nat1) (tmax (tree2)) = true -> isbst (tree1) = true -> isbst (tree2) = true -> lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> lq (nat1) (match (spec (tree1)) with
| Tuple2 _ b -> b) = true -> lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:33.)
=================================================
Progress: 34


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:9.)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:9.)
=================================================
Progress: 35


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite Case1 in goal at 0(rank:17.)
=================================================
Progress: 36


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case1 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 37


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 38


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 39


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 40


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 41


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 42


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 43


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 44


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 45


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 46


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 47


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 48


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO)))))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 49


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
=================================================
Progress: 50


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 51


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 52


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 53


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 54


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 55


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 56


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 57


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 18
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 2(rank:26.)
rewrite <- Case3 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 2(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:26.)
rewrite <- Case4 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 2(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 1(rank:26.)
rewrite <- Case7 in goal at 2(rank:26.)
=================================================
Progress: 58


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 59


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:9.)
=================================================
Progress: 60


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case2 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 61


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 62


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 63


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 64


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 65


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 66


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 67


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case2 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO))))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 68


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 69


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 70


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 71


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 72


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 73


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))))) (Leaf (ZERO)))) (tmax (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 74


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 18
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 2(rank:26.)
rewrite <- Case3 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 2(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
rewrite <- Case4 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 2(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 1(rank:26.)
rewrite <- Case7 in goal at 2(rank:26.)
=================================================
Progress: 75


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 76


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:9.)
=================================================
Progress: 77


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case3 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 78


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 79


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 80


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 81


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 82


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 83


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 84


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case3 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 85


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 86


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 87


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 88


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 89


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 90


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))))
=================================================
Progress: 91


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 18
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 2(rank:26.)
rewrite <- Case2 in goal at 1(rank:26.)
rewrite <- Case2 in goal at 2(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 1(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
rewrite <- Case4 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 2(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 1(rank:26.)
rewrite <- Case7 in goal at 2(rank:26.)
=================================================
Progress: 92


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 93


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:9.)
=================================================
Progress: 94


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case4 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 95


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 96


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 97


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 98


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 99


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 100


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 101


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case4 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))
=================================================
Progress: 102


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO))))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 103


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 104


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 105


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 106


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 107


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 108


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 18
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 2(rank:26.)
rewrite <- Case2 in goal at 1(rank:26.)
rewrite <- Case2 in goal at 2(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 1(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 2(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 1(rank:26.)
rewrite <- Case7 in goal at 2(rank:26.)
=================================================
Progress: 109


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 110


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:9.)
=================================================
Progress: 111


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case5 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 112


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 113


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
=================================================
Progress: 114


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 115


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 116


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 117


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 118


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 119


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 120


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 121


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 122


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 123


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 124


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 125


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 18
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 2(rank:26.)
rewrite <- Case2 in goal at 1(rank:26.)
rewrite <- Case2 in goal at 2(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 1(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 2(rank:26.)
rewrite <- Case4 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 2(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 2(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 1(rank:26.)
rewrite <- Case7 in goal at 2(rank:26.)
=================================================
Progress: 126


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 127


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:9.)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:9.)
=================================================
Progress: 128


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
=================================================
Progress: 129


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case1 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 130


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 131


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 132


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 133


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 134


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 135


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (tmax (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (ZERO))))
=================================================
Progress: 136


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 137


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 138


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 139


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 140


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 141


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 142


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))
=================================================
Progress: 143


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:9.)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:9.)
=================================================
Progress: 144


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
=================================================
Progress: 145


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case2 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 146


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 147


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 148


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 149


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 150


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 151


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 152


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 153


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 154


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 155


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 156


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 157


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 158


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 159


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:9.)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:9.)
=================================================
Progress: 160


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
=================================================
Progress: 161


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case3 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 162


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 163


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 164


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 165


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 166


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO)))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 167


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))
=================================================
Progress: 168


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 169


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 170


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 171


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 172


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 173


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 174


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 175


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:9.)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:9.)
=================================================
Progress: 176


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
=================================================
Progress: 177


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case4 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 178


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 179


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 180


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 181


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 182


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 183


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 184


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case5 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 185


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 186


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 187


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 188


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 189


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 190


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 191


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 0(rank : 24.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:9.)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:9.)
=================================================
Progress: 192


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
=================================================
Progress: 193


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

5 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 9.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite Case5 in goal at 0(rank:17.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 194


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 195


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
=================================================
Progress: 196


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 197


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 198


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 199


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 200


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 17.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 17
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case3 in goal at 2(rank:25.)
rewrite <- Case4 in goal at 1(rank:25.)
rewrite <- Case4 in goal at 2(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 1(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Case2 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 2(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 1(rank:25.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case6 in goal at 2(rank:25.)
=================================================
Progress: 201


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 202


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 203


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 204


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) (tmax (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 205


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 206


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))))
=================================================
Progress: 207


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 208


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 2(rank:18.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case1 in goal at 1(rank:18.)
=================================================
Progress: 209


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 210


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 211


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 212


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 213


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 214


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))) (Leaf (ZERO))) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))))) (Leaf (ZERO))))
=================================================
Progress: 215


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 216


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 217


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 218


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 219


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 220


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 221


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 222


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))
=================================================
Progress: 223


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 224


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
=================================================
Progress: 225


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 226


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 227


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 228


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 229


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 230


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 231


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 1
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 232


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 233


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 18
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 2(rank:26.)
rewrite <- Case3 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 2(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:26.)
rewrite <- Case4 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 2(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 1(rank:26.)
rewrite <- Case7 in goal at 2(rank:26.)
=================================================
Progress: 234


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 235


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 236


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 237


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 238


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 239


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case2 in goal at 2(rank:18.)
rewrite Case2 in goal at 0(rank:18.)
rewrite Case2 in goal at 1(rank:18.)
=================================================
Progress: 240


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 241


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 242


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 243


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 244


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 245


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case2 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 246


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 247


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 248


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 249


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 250


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 251


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 252


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 253


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO)))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
=================================================
Progress: 254


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 255


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 256


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 257


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 258


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 259


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 260


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 261


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 262


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 263


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))
=================================================
Progress: 264


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 265


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case3 in goal at 2(rank:18.)
rewrite Case3 in goal at 0(rank:18.)
rewrite Case3 in goal at 1(rank:18.)
=================================================
Progress: 266


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 267


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 268


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 269


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 270


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 271


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case3 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 272


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
=================================================
Progress: 273


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 274


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 275


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 276


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 277


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 278


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 279


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 280


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 281


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
=================================================
Progress: 282


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 283


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 284


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 285


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))))
=================================================
Progress: 286


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 287


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
=================================================
Progress: 288


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 289


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 290


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 291


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case4 in goal at 2(rank:18.)
rewrite Case4 in goal at 0(rank:18.)
rewrite Case4 in goal at 1(rank:18.)
=================================================
Progress: 292


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 293


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 294


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 295


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 296


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 297


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case4 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 298


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))))) (tmax (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 299


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 300


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 301


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 302


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 303


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 304


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 305


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case4 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (tmax (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO))))
=================================================
Progress: 306


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 307


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 308


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 309


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 310


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 311


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 312


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 313


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 314


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 315


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 316


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 317


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case5 in goal at 2(rank:18.)
rewrite Case5 in goal at 0(rank:18.)
rewrite Case5 in goal at 1(rank:18.)
=================================================
Progress: 318


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
=================================================
Progress: 319


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 320


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 321


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 322


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 323


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 324


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))))) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 325


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 326


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 327


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 328


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 329


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 330


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 331


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 332


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 333


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 334


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
=================================================
Progress: 335


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 336


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 337


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 338


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 339


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 340


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 341


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))))
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))) (Leaf (ZERO))))
=================================================
Progress: 342


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case6 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 343


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case6 in goal at 2(rank:18.)
rewrite Case6 in goal at 0(rank:18.)
rewrite Case6 in goal at 1(rank:18.)
=================================================
Progress: 344


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case6 in goal at 0(rank:18.)
=================================================
Progress: 345


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 346


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 347


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 348


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 349


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 350


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 351


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 352


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 353


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 354


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 355


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 356


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 357


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case6 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 358


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 359


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case6 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 360


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case6 in goal at 0(rank:18.)
=================================================
Progress: 361


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 362


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 363


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 364


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 365


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case6 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 366


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 367


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))
=================================================
Progress: 368


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 369


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 2(rank:18.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case1 in goal at 1(rank:18.)
=================================================
Progress: 370


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 371


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 372


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 373


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 374


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 375


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 376


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))))) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))) (Leaf (ZERO)))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (ZERO)))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 377


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 378


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 379


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 380


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 381


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 382


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 383


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 384


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 385


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
=================================================
Progress: 386


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 387


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 388


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 389


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 390


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 391


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 392


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 1
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 393


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 394


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 18
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 2(rank:26.)
rewrite <- Case3 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 2(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 1(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 1(rank:26.)
rewrite <- Case4 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 1(rank:26.)
rewrite <- Case6 in goal at 2(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 2(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 1(rank:26.)
rewrite <- Case7 in goal at 2(rank:26.)
=================================================
Progress: 395


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 396


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case2 in goal at 0(rank:25.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 397


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 398


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 399


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 400


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case2 in goal at 2(rank:18.)
rewrite Case2 in goal at 0(rank:18.)
rewrite Case2 in goal at 1(rank:18.)
=================================================
Progress: 401


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 402


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 403


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 404


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 405


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 406


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case2 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 407


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 408


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 409


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 410


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 411


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 412


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 413


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 414


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 415


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 416


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 417


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 418


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 419


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 420


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 421


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 422


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 423


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 424


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case2 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 425


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 426


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case3 in goal at 2(rank:18.)
rewrite Case3 in goal at 0(rank:18.)
rewrite Case3 in goal at 1(rank:18.)
=================================================
Progress: 427


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 428


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 429


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 430


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 431


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 432


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case3 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 433


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 434


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 435


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 436


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 437


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 438


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 439


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 440


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 441


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 442


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
=================================================
Progress: 443


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 444


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 445


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 446


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (ZERO)))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (ZERO))))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 447


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 448


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
=================================================
Progress: 449


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 450


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case3 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))))
=================================================
Progress: 451


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 452


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case4 in goal at 2(rank:18.)
rewrite Case4 in goal at 0(rank:18.)
rewrite Case4 in goal at 1(rank:18.)
=================================================
Progress: 453


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 454


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 455


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 456


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 457


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 458


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case4 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 459


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 460


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 461


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 462


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 463


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 464


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 465


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 466


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case4 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 467


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 468


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 469


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 470


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 471


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 472


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
simpl in goal
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 473


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 474


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 475


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 476


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case4 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
spec(target(tree3))
remove lower
spec(target(tree3))
remove upper
Tuple2(_, nat1)
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 477


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 478


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case5 in goal at 2(rank:18.)
rewrite Case5 in goal at 0(rank:18.)
rewrite Case5 in goal at 1(rank:18.)
=================================================
Progress: 479


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
=================================================
Progress: 480


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 481


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 482


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 483


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 484


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
=================================================
Progress: 485


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))))
=================================================
Progress: 486


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 487


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 488


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 489


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 490


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 491


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 492


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (SUCC (ZERO))))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (SUCC (ZERO))))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Leaf (ZERO))))
=================================================
Progress: 493


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 494


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 495


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
=================================================
Progress: 496


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 497


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 498


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 499


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 500


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 501


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 502


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case5 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 503


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case6 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 504


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case6 in goal at 2(rank:18.)
rewrite Case6 in goal at 0(rank:18.)
rewrite Case6 in goal at 1(rank:18.)
=================================================
Progress: 505


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case6 in goal at 0(rank:18.)
=================================================
Progress: 506


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 507


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 508


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 509


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 510


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 511


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 512


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 513


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 514


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 515


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 516


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 517


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 518


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case6 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))))
=================================================
Progress: 519


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 520


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case6 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 521


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case6 in goal at 0(rank:18.)
=================================================
Progress: 522


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 523


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 524


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case6 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 525


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 526


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case6 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 527


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 528


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case6 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 529


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 530


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 2(rank:18.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case1 in goal at 1(rank:18.)
=================================================
Progress: 531


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 532


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 533


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 534


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 535


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 536


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 537


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 538


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 539


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 540


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 541


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if geq (nat1) (tmax (tree2)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 542


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 543


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 544


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 545


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 546


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 547


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 548


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 549


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 550


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 551


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 552


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 553


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))
=================================================
Progress: 554


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (SUCC (ZERO)))))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 555


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 556


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:10.)
=================================================
Progress: 557


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 558


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
rewrite Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 559


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 560


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 561


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 562


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 563


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 564


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 565


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 566


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 567


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 568


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 569


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 570


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 571


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (SUCC (SUCC (ZERO)))) (Leaf (ZERO))))
=================================================
Progress: 572


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 573


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 574


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:10.)
=================================================
Progress: 575


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 576


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
rewrite Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (ZERO)))))) (Leaf (ZERO))) (Leaf (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 577


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 578


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 579


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 580


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 581


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 582


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 583


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 584


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 585


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 586


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 587


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 588


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 589


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 590


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 591


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 592


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:10.)
=================================================
Progress: 593


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 594


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
rewrite Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 595


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 596


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 597


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 598


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
=================================================
Progress: 599


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 600


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 601


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case5 in goal at 0(rank:18.)
=================================================
Progress: 602


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 603


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 604


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 605


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 606


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 607


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 608


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (SUCC (ZERO))))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 609


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 610


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:10.)
=================================================
Progress: 611


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 612


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
rewrite Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
=================================================
Progress: 613


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 614


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 615


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 616


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 617


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 618


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case6 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:10.)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 619


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
rewrite Case6 in goal at 0(rank:18.)
=================================================
Progress: 620


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 621


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 622


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 623


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 624


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 625


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) (Leaf (ZERO)))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))
=================================================
Progress: 626


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (SUCC (ZERO))))))))) (Leaf (ZERO)))) (Leaf (ZERO)))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (SUCC (ZERO))))))))) (Leaf (ZERO)))) (Leaf (ZERO))))))
=================================================
Progress: 627


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 628


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:10.)
=================================================
Progress: 629


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 630


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
simpl in goal
rewrite Case6 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
=================================================
Progress: 631


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 632


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 633


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 634


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite <- Case6 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case6 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 635


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if geq (nat1) (tmax (tree2)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 636


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 637


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 638


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 639


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 640


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 641


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 642


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 643


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 644


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 645


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 646


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 647


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (SUCC (ZERO))))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))))) (tmax (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 648


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 649


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 650


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 651


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 652


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 653


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 654


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
rewrite <- Case4 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case4 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 655


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 656


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 657


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 658


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 659


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 660


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 661


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
rewrite <- Case5 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
=================================================
Progress: 662


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 663


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 664


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case6 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 665


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:11.)
rewrite Case6 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
=================================================
Progress: 666


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case6 in goal at 0(rank:11.)
=================================================
Progress: 667


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 668


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case1 in goal at 0
rewrite <- Case6 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
rewrite Case6 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (SUCC (ZERO)))) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 669


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case6 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 670


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case7 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 671


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 672


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 673


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 674


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 675


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))) (Leaf (ZERO)))))
=================================================
Progress: 676


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 677


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 678


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case2 in goal at 0(rank:18.)
=================================================
Progress: 679


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 680


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 681


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case2 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
=================================================
Progress: 682


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if leq (nat1) (tmax (tree3)) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
=================================================
Progress: 683


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case3 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 684


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if leq (nat1) (tmax (tree3)) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 685


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 686


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 687


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 688


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 689


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 690


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) (tmax (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO))))))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 691


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 692


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
=================================================
Progress: 693


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case3 in goal at 0(rank:18.)
=================================================
Progress: 694


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:11.)
=================================================
Progress: 695


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 696


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case3 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 697


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree2) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 698


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case6 in goal at 0(rank:25.)
rewrite <- Case4 in goal at 0(rank:25.)
rewrite <- Case5 in goal at 0(rank:25.)
=================================================
Progress: 699


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree2) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 700


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (ZERO))))
=================================================
Progress: 701


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 702


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 703


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 704


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 705


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case4 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))) (Leaf (ZERO))) (Leaf (ZERO))))) (Leaf (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Leaf (SUCC (SUCC (ZERO))))) (tmax (Leaf (ZERO)))
=================================================
Progress: 706


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 707


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 1(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 708


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case4 in goal at 0(rank:18.)
=================================================
Progress: 709


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case4 in goal at 0(rank:11.)
=================================================
Progress: 710


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 711


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case4 in goal at 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case4 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (SUCC (ZERO))))))) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (SUCC (ZERO)) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO)))) (Leaf (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))))))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))))))
=================================================
Progress: 712


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if isbst (tree3) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case4 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
=================================================
Progress: 713


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case4 in goal at 2(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
rewrite <- Case5 in goal at 0(rank:25.)
rewrite <- Case6 in goal at 0(rank:25.)
=================================================
Progress: 714


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if isbst (tree3) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Case3 in goal at 0(rank:26.)
rewrite <- Case4 in goal at 0(rank:26.)
rewrite <- Case5 in goal at 0(rank:26.)
rewrite <- Case6 in goal at 0(rank:26.)
rewrite <- Case2 in goal at 0(rank:26.)
rewrite <- Case7 in goal at 0(rank:26.)
=================================================
Progress: 715


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case4 in goal at 2
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (SUCC (ZERO))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (SUCC (SUCC (ZERO)))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))) = Tuple2 (tmax (Node (ZERO) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))) (Leaf (ZERO)))) (tmax (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (SUCC (ZERO)))))) (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (SUCC (ZERO))))) (Leaf (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (SUCC (ZERO)))))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (SUCC (ZERO))) (Leaf (ZERO)) (Leaf (SUCC (ZERO))))) (Leaf (SUCC (SUCC (ZERO))))))
=================================================
Progress: 716


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if true then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case5 in goal at 0(rank : 25.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank:10.)
=================================================
Progress: 717


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

6 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)(rank : 10.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:11.)
rewrite Case5 in goal at 0(rank:18.)
=================================================
Progress: 718


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case5 in goal at 0(rank:11.)
=================================================
Progress: 719


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 720


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
Case8 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case geq (nat1) (tmax (tree2))
case leq (nat1) (tmax (tree3))
case isbst (tree2)
case isbst (tree3)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite <- Case1 in goal at 0
case lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b)
rewrite Case1 in goal at 0
rewrite <- Case5 in goal at 0
case lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b)
case lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a)
rewrite Case5 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))) (Leaf (ZERO))))
=================================================
Progress: 721


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case5 in goal at 0(rank : 18.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (target (tree2)) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (target (tree3)) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : geq (nat1) (tmax (tree2)) = true
Case2 : leq (nat1) (tmax (tree3)) = true
Case3 : isbst (tree2) = true
Case4 : isbst (tree3) = true
Case5 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case6 : lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case7 : lq (nat1) (match (spec (tree2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) then if true then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

7 goal(s) more...

0 conjecture(s) more...
