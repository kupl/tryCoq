Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if isbst (tree1) then spec (target (tree1)) else Tuple2 (ZERO) (ZERO) = if isbst (tree1) then Tuple2 (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (match (targetNew (tree1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction tree1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if isbst (tree1) then spec (target (tree1)) else Tuple2 (ZERO) (ZERO) = if isbst (tree1) then Tuple2 (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (match (targetNew (tree1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> induction tree1(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
Base1 : tree1 = Leaf (nat1)
---------------------------------------
if isbst (Leaf (nat1)) then spec (target (Leaf (nat1))) else Tuple2 (ZERO) (ZERO) = if isbst (Leaf (nat1)) then Tuple2 (match (targetNew (Leaf (nat1))) with
| Tuple2 a _ -> a) (match (targetNew (Leaf (nat1))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
Base1 : tree1 = Leaf (nat1)
---------------------------------------
if isbst (Leaf (nat1)) then spec (target (Leaf (nat1))) else Tuple2 (ZERO) (ZERO) = if isbst (Leaf (nat1)) then Tuple2 (match (targetNew (Leaf (nat1))) with
| Tuple2 a _ -> a) (match (targetNew (Leaf (nat1))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if isbst (Node (nat1) (tree2) (tree3)) then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if isbst (Node (nat1) (tree2) (tree3)) then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if isbst (Node (nat1) (tree2) (tree3)) then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if isbst (Node (nat1) (tree2) (tree3)) then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false(rank:4.)
=================================================
Progress: 6


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false then spec (target (Node (nat1) (tree2) (tree3))) else Tuple2 (ZERO) (ZERO) = if if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false then Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> case if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:5.)
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a)(rank:5.)
=================================================
Progress: 7


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 8


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:6.)
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:6.)
=================================================
Progress: 9


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) then if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a else nat1) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case3 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 10


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)(rank:7.)
=================================================
Progress: 11


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank:7.)
=================================================
Progress: 12


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case3 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case3 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
_
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
tmax(tree2)
remove lower
tmax(_)
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO))) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Node (ZERO) (Node (ZERO) (Leaf (ZERO)) (Leaf (SUCC (ZERO)))) (Leaf (ZERO))))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case3 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 13


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case3 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 14


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 15


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (tmax (Leaf (nat2))) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (Leaf (nat2))) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 16


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (tmax (Leaf (nat2))) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (Leaf (nat2))) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (nat2) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (nat2) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat2) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 17


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (if lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) then nat1 else if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = Tuple2 (tmax (tree2)) (tmax (tree3))

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
_
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
tmax(tree2)
remove lower
tmax(_)
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Leaf (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (SUCC (SUCC (ZERO))) (Leaf (SUCC (ZERO))) (Leaf (SUCC (SUCC (ZERO)))))) (tmax (Leaf (SUCC (ZERO))))
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO)))) (tmax (Node (ZERO) (Leaf (ZERO)) (Leaf (ZERO))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (SUCC (ZERO)))) (tmax (Leaf (ZERO)))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 18


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case4 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 19


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 20


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (tmax (Leaf (nat2))) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (Leaf (nat2))) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 21


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (tmax (Leaf (nat2))) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (Leaf (nat2))) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (nat2) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat2) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (nat2) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 22


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

3 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)(rank : 7.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case4 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) then match (spec (tree3)) with
| Tuple2 a _ -> a else match (spec (tree2)) with
| Tuple2 a _ -> a)
case lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b)
case lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a)
parent
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1)
lower
Tuple2(_, _)
upper
_
remove upper
_
parent
tmax (tree2)
lower
tmax(_)
upper
Tuple2(_, tmax(tree3))
remove upper
tmax(tree2)
remove lower
tmax(_)
remove upper
_
validate generalize_common_subterm_goal
Prop: Tuple2 (match (spec (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO)))))))) with
| Tuple2 a _ -> a) (SUCC (ZERO)) = Tuple2 (tmax (Node (ZERO) (Leaf (ZERO)) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (ZERO))))) (tmax (Node (ZERO) (Leaf (SUCC (ZERO))) (Node (SUCC (ZERO)) (Leaf (ZERO)) (Leaf (SUCC (SUCC (SUCC (ZERO))))))))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Prop: Tuple2 (match (spec (Leaf (ZERO))) with
| Tuple2 a _ -> a) (ZERO) = Tuple2 (tmax (Leaf (ZERO))) (tmax (Leaf (ZERO)))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case4 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if isbst (tree2) then spec (target (tree2)) else Tuple2 (ZERO) (ZERO) = if isbst (tree2) then Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
IH2 : if isbst (tree3) then spec (target (tree3)) else Tuple2 (ZERO) (ZERO) = if isbst (tree3) then Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if geq (nat1) (tmax (tree2)) then if leq (nat1) (tmax (tree3)) then if isbst (tree2) then isbst (tree3) else false else false else false = true
Case2 : lq (nat1) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
Case3 : lq (nat1) (if lq (match (spec (tree2)) with
| Tuple2 _ b -> b) (match (spec (tree3)) with
| Tuple2 _ b -> b) then match (spec (tree2)) with
| Tuple2 _ b -> b else match (spec (tree3)) with
| Tuple2 _ b -> b) = true
Case4 : lq (match (spec (tree2)) with
| Tuple2 a _ -> a) (match (spec (tree3)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (match (spec (tree3)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree2)) (tmax (tree3))

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 24


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 25


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (tmax (Leaf (nat2))) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (Leaf (nat2))) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 26


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (tmax (Leaf (nat2))) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (Leaf (nat2))) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (Leaf (nat2))) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (nat2) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (nat2) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat2) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 27


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (nat2) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (nat2) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat2) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (Leaf (nat3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 28


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (nat2) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat2) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (nat2) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (Leaf (nat3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 29


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
---------------------------------------
forall (tree2:tree), if geq (nat1) (nat2) then if leq (nat1) (tmax (tree2)) then if isbst (Leaf (nat2)) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (nat2) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat2) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (Leaf (nat3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 30


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (Leaf (nat3)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 31


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (Leaf (nat3)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 32


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (Leaf (nat3))) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (nat2) (tmax (Leaf (nat3)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 33


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 34


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 35


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 36


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 37


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 38


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 39


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 40


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 41


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 42


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (ZERO) (SUCC (SUCC (ZERO)))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 43


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 44


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
Cond4 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
Cond4 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 45


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
Cond4 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 46


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
intro Cond4
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 47


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), if geq (nat1) (tmax (tree1)) then if leq (nat1) (tmax (tree2)) then if isbst (tree1) then isbst (tree2) else false else false else false = true->lq (nat1) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true->lq (nat1) (if lq (match (spec (tree1)) with
| Tuple2 _ b -> b) (match (spec (tree2)) with
| Tuple2 _ b -> b) then match (spec (tree1)) with
| Tuple2 _ b -> b else match (spec (tree2)) with
| Tuple2 _ b -> b) = true->lq (match (spec (tree1)) with
| Tuple2 a _ -> a) (match (spec (tree2)) with
| Tuple2 a _ -> a) = true -> Tuple2 (match (spec (tree2)) with
| Tuple2 a _ -> a) (nat1) = Tuple2 (tmax (tree1)) (tmax (tree2))
nat1 : nat
tree1 : tree
nat2 : nat
Base1 : tree1 = Leaf (nat2)
tree2 : tree
nat3 : nat
Base2 : tree2 = Leaf (nat3)
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 48


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 49


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 50


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 51


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 52


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 53


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:7.)
=================================================
Progress: 54


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 55


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 56


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 57


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 58


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 59


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7.)
=================================================
Progress: 60


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 61


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 62


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7.)
=================================================
Progress: 63


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 64


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 65


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:7.)
=================================================
Progress: 66


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (ZERO)) (ZERO)
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 67


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 68


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
Cond4 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (SUCC (SUCC (ZERO))) (ZERO)
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (ZERO)
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
Cond4 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 69


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
Cond4 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 70


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond4(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 71


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 72


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 73


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 74


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat2(rank:9.)
=================================================
Progress: 75


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 76


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 77


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
---------------------------------------
forall (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat3(rank:9.)
=================================================
Progress: 78


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 79


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 80


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
---------------------------------------
forall (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 81


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 82


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 83


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
---------------------------------------
if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 84


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 85


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 86


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:9.)
=================================================
Progress: 87


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 88


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 89


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:9.)
=================================================
Progress: 90


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond3 : lq (nat1) (nat3) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (SUCC (ZERO)) (SUCC (ZERO))
Prop: Tuple2 (SUCC (ZERO)) (SUCC (ZERO)) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
=================================================
Progress: 91


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
---------------------------------------
lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat2) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat2) (nat3) = true
Cond4 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (SUCC (SUCC (ZERO))) (ZERO) = Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))
=================================================
Progress: 92


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
---------------------------------------
lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond4(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true->lq (nat1) (nat3) = true->lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true->lq (nat2) (nat3) = true -> Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)
nat1 : nat
nat2 : nat
nat3 : nat
Cond1 : if geq (nat1) (nat2) then if leq (nat1) (tmax (Leaf (nat3))) then if isbst (Leaf (nat2)) then isbst (Leaf (nat3)) else false else false else false = true
Cond2 : lq (nat1) (nat3) = true
Cond3 : lq (nat1) (if lq (nat2) (nat3) then match (spec (Leaf (nat2))) with
| Tuple2 _ b -> b else match (spec (Leaf (nat3))) with
| Tuple2 _ b -> b) = true
Cond4 : lq (nat2) (nat3) = true
---------------------------------------
Tuple2 (nat3) (nat1) = Tuple2 (nat2) (nat3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: Tuple2 (SUCC (ZERO)) (ZERO) = Tuple2 (ZERO) (SUCC (ZERO))
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Prop: Tuple2 (ZERO) (ZERO) = Tuple2 (ZERO) (ZERO)
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 284, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
