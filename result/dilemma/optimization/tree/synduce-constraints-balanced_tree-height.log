Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if balanced (tree1) then height (target (tree1)) else ZERO = if balanced (tree1) then targetNew (tree1) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction tree1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), if balanced (tree1) then height (target (tree1)) else ZERO = if balanced (tree1) then targetNew (tree1) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> induction tree1(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Base1 : tree1 = Leaf
---------------------------------------
if balanced (Leaf) then height (target (Leaf)) else ZERO = if balanced (Leaf) then targetNew (Leaf) else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Base1 : tree1 = Leaf
---------------------------------------
if balanced (Leaf) then height (target (Leaf)) else ZERO = if balanced (Leaf) then targetNew (Leaf) else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if balanced (Node (nat1) (tree2) (tree3)) then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if balanced (Node (nat1) (tree2) (tree3)) then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if balanced (Node (nat1) (tree2) (tree3)) then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if balanced (Node (nat1) (tree2) (tree3)) then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false(rank:4.)
=================================================
Progress: 6


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false then height (target (Node (nat1) (tree2) (tree3))) else ZERO = if if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false then targetNew (Node (nat1) (tree2) (tree3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> case if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false = true
---------------------------------------
SUCC (if lq (height (target (tree2))) (height (target (tree3))) then height (target (tree3)) else height (target (tree2))) = plus (targetNew (tree3)) (SUCC (ZERO))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (height (target (tree2))) (height (target (tree3)))(rank:5.)
=================================================
Progress: 7


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false = true
---------------------------------------
SUCC (if lq (height (target (tree2))) (height (target (tree3))) then height (target (tree3)) else height (target (tree2))) = plus (targetNew (tree3)) (SUCC (ZERO))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (height (target (tree2))) (height (target (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : if balanced (tree2) then height (target (tree2)) else ZERO = if balanced (tree2) then targetNew (tree2) else ZERO
IH2 : if balanced (tree3) then height (target (tree3)) else ZERO = if balanced (tree3) then targetNew (tree3) else ZERO
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false = true
Case2 : lq (height (target (tree2))) (height (target (tree3))) = true
---------------------------------------
SUCC (height (target (tree3))) = plus (targetNew (tree3)) (SUCC (ZERO))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case if nat_eq (height (tree2)) (height (tree3)) then if balanced (tree2) then balanced (tree3) else false else false
case lq (height (target (tree2))) (height (target (tree3)))
validate generalize_common_subterm_goal
Prop: SUCC (height (target (Leaf))) = plus (targetNew (Leaf)) (SUCC (ZERO))
Prop: SUCC (height (target (Leaf))) = plus (targetNew (Leaf)) (SUCC (ZERO))
Prop: SUCC (height (target (Node (ZERO) (Leaf) (Node (ZERO) (Node (ZERO) (Leaf) (Leaf)) (Leaf))))) = plus (targetNew (Node (ZERO) (Leaf) (Node (ZERO) (Node (ZERO) (Leaf) (Leaf)) (Leaf)))) (SUCC (ZERO))
asdf
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 284, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
