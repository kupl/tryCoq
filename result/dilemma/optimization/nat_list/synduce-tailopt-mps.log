Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:nat list), main (lst) = mainNew (lst)(rank : 0.)


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)

---------------------------------------
forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)

---------------------------------------
forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)

---------------------------------------
forall (nat_list1:nat list), match (tf1 (tf5 ((Nil)) (nat_list1))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list1)) with
| Tuple2 a _ -> a

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat_list1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)

---------------------------------------
forall (nat_list1:nat list), match (tf1 (tf5 ((Nil)) (nat_list1))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list1)) with
| Tuple2 a _ -> a

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat_list1(rank : 4.)


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
match (tf1 (tf5 ((Nil)) ((Nil)))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) ((Nil))) with
| Tuple2 a _ -> a

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
Base1 : nat_list1 = (Nil)
---------------------------------------
match (tf1 (tf5 ((Nil)) ((Nil)))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) ((Nil))) with
| Tuple2 a _ -> a

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : match (tf1 (tf5 ((Nil)) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list2)) with
| Tuple2 a _ -> a
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
match (tf1 (tf5 ((Nil)) ((nat1::nat_list2)))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) ((nat1::nat_list2))) with
| Tuple2 a _ -> a

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : match (tf1 (tf5 ((Nil)) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list2)) with
| Tuple2 a _ -> a
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
match (tf1 (tf5 ((Nil)) ((nat1::nat_list2)))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) ((nat1::nat_list2))) with
| Tuple2 a _ -> a

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : match (tf1 (tf5 ((Nil)) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list2)) with
| Tuple2 a _ -> a
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
match (tf1 (tf5 ((nat1::(Nil))) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (plus (nat1) (ZERO)) (plus (nat1) (ZERO))) (nat_list2)) with
| Tuple2 a _ -> a

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case tf1 (tf5 ((nat1::(Nil))) (nat_list2))(rank:3.)
case tf7 (Tuple2 (plus (nat1) (ZERO)) (plus (nat1) (ZERO))) (nat_list2)(rank:3.)
=================================================
Progress: 6


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : match (tf1 (tf5 ((Nil)) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list2)) with
| Tuple2 a _ -> a
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
match (tf1 (tf5 ((nat1::(Nil))) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (plus (nat1) (ZERO)) (plus (nat1) (ZERO))) (nat_list2)) with
| Tuple2 a _ -> a

0 goal(s) more...

0 conjecture(s) more...
>>> case tf1 (tf5 ((nat1::(Nil))) (nat_list2))(rank : 3.)


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : match (tf1 (tf5 ((Nil)) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list2)) with
| Tuple2 a _ -> a
Inductive1 : nat_list1 = (nat1::nat_list2)
nat2 : nat
nat3 : nat
Case1 : tf1 (tf5 ((nat1::(Nil))) (nat_list2)) = Tuple2 (nat2) (nat3)
---------------------------------------
nat3 = match (tf7 (Tuple2 (plus (nat1) (ZERO)) (plus (nat1) (ZERO))) (nat_list2)) with
| Tuple2 a _ -> a

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case tf1 (tf5 ((nat1::(Nil))) (nat_list2))
validate generalize_common_subterm_goal
Prop: ZERO = match (tf7 (Tuple2 (plus (SUCC (ZERO)) (ZERO)) (plus (SUCC (ZERO)) (ZERO))) ((SUCC (SUCC (ZERO))::(ZERO::(Nil))))) with
| Tuple2 a _ -> a
Prop: ZERO = match (tf7 (Tuple2 (plus (ZERO) (ZERO)) (plus (ZERO) (ZERO))) ((Nil))) with
| Tuple2 a _ -> a
Prop: SUCC (ZERO) = match (tf7 (Tuple2 (plus (ZERO) (ZERO)) (plus (ZERO) (ZERO))) ((Nil))) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 7


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : match (tf1 (tf5 ((Nil)) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list2)) with
| Tuple2 a _ -> a
Inductive1 : nat_list1 = (nat1::nat_list2)
---------------------------------------
match (tf1 (tf5 ((nat1::(Nil))) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (plus (nat1) (ZERO)) (plus (nat1) (ZERO))) (nat_list2)) with
| Tuple2 a _ -> a

0 goal(s) more...

0 conjecture(s) more...
>>> case tf7 (Tuple2 (plus (nat1) (ZERO)) (plus (nat1) (ZERO))) (nat_list2)(rank : 3.)


1st goal of : forall (nat_list1:nat list), main (nat_list1) = mainNew (nat_list1)
nat_list1 : nat list
nat1 : nat
nat_list2 : nat list
IH1 : match (tf1 (tf5 ((Nil)) (nat_list2))) with
| Tuple2 _ b -> b = match (tf7 (Tuple2 (ZERO) (ZERO)) (nat_list2)) with
| Tuple2 a _ -> a
Inductive1 : nat_list1 = (nat1::nat_list2)
nat2 : nat
nat3 : nat
Case1 : tf7 (Tuple2 (plus (nat1) (ZERO)) (plus (nat1) (ZERO))) (nat_list2) = Tuple2 (nat2) (nat3)
---------------------------------------
match (tf1 (tf5 ((nat1::(Nil))) (nat_list2))) with
| Tuple2 _ b -> b = nat2

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case tf7 (Tuple2 (plus (nat1) (ZERO)) (plus (nat1) (ZERO))) (nat_list2)
validate generalize_common_subterm_goal
Prop: match (tf1 (tf5 ((ZERO::(Nil))) ((Nil)))) with
| Tuple2 _ b -> b = ZERO
Prop: match (tf1 (tf5 ((ZERO::(Nil))) ((Nil)))) with
| Tuple2 _ b -> b = ZERO
Prop: match (tf1 (tf5 ((ZERO::(Nil))) ((Nil)))) with
| Tuple2 _ b -> b = SUCC (ZERO)
asdf
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
