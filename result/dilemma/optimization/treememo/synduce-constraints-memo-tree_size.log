Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:treememo), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)

---------------------------------------
forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)

---------------------------------------
forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)

---------------------------------------
forall (treememo1:treememo), if ismemo (treememo1) then spec (repr (target (treememo1))) else ZERO = if ismemo (treememo1) then match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction treememo1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)

---------------------------------------
forall (treememo1:treememo), if ismemo (treememo1) then spec (repr (target (treememo1))) else ZERO = if ismemo (treememo1) then match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> induction treememo1(rank : 4.)


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
Base1 : treememo1 = Mleaf (nat1)
---------------------------------------
if ismemo (Mleaf (nat1)) then spec (repr (target (Mleaf (nat1)))) else ZERO = if ismemo (Mleaf (nat1)) then match (Mleaf (nat1)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
Base1 : treememo1 = Mleaf (nat1)
---------------------------------------
if ismemo (Mleaf (nat1)) then spec (repr (target (Mleaf (nat1)))) else ZERO = if ismemo (Mleaf (nat1)) then match (Mleaf (nat1)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : if ismemo (treememo2) then spec (repr (target (treememo2))) else ZERO = if ismemo (treememo2) then match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
IH2 : if ismemo (treememo3) then spec (repr (target (treememo3))) else ZERO = if ismemo (treememo3) then match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
---------------------------------------
if ismemo (Mnode (nat1) (nat2) (treememo2) (treememo3)) then spec (repr (target (Mnode (nat1) (nat2) (treememo2) (treememo3)))) else ZERO = if ismemo (Mnode (nat1) (nat2) (treememo2) (treememo3)) then match (Mnode (nat1) (nat2) (treememo2) (treememo3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : if ismemo (treememo2) then spec (repr (target (treememo2))) else ZERO = if ismemo (treememo2) then match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
IH2 : if ismemo (treememo3) then spec (repr (target (treememo3))) else ZERO = if ismemo (treememo3) then match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
---------------------------------------
if ismemo (Mnode (nat1) (nat2) (treememo2) (treememo3)) then spec (repr (target (Mnode (nat1) (nat2) (treememo2) (treememo3)))) else ZERO = if ismemo (Mnode (nat1) (nat2) (treememo2) (treememo3)) then match (Mnode (nat1) (nat2) (treememo2) (treememo3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : if ismemo (treememo2) then spec (repr (target (treememo2))) else ZERO = if ismemo (treememo2) then match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
IH2 : if ismemo (treememo3) then spec (repr (target (treememo3))) else ZERO = if ismemo (treememo3) then match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
---------------------------------------
if if nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) then if ismemo (treememo2) then ismemo (treememo3) else false else false then spec (repr (target (Mnode (nat1) (nat2) (treememo2) (treememo3)))) else ZERO = if if nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) then if ismemo (treememo2) then ismemo (treememo3) else false else false then match (Mnode (nat1) (nat2) (treememo2) (treememo3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1)))(rank:4.)
=================================================
Progress: 6


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : if ismemo (treememo2) then spec (repr (target (treememo2))) else ZERO = if ismemo (treememo2) then match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
IH2 : if ismemo (treememo3) then spec (repr (target (treememo3))) else ZERO = if ismemo (treememo3) then match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
---------------------------------------
if if nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) then if ismemo (treememo2) then ismemo (treememo3) else false else false then spec (repr (target (Mnode (nat1) (nat2) (treememo2) (treememo3)))) else ZERO = if if nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) then if ismemo (treememo2) then ismemo (treememo3) else false else false then match (Mnode (nat1) (nat2) (treememo2) (treememo3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> case nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1)))(rank : 4.)


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : if ismemo (treememo2) then spec (repr (target (treememo2))) else ZERO = if ismemo (treememo2) then match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
IH2 : if ismemo (treememo3) then spec (repr (target (treememo3))) else ZERO = if ismemo (treememo3) then match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
Case1 : nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true
---------------------------------------
if if ismemo (treememo2) then ismemo (treememo3) else false then spec (repr (target (Mnode (nat1) (nat2) (treememo2) (treememo3)))) else ZERO = if if ismemo (treememo2) then ismemo (treememo3) else false then match (Mnode (nat1) (nat2) (treememo2) (treememo3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case ismemo (treememo2)(rank:5.)
=================================================
Progress: 7


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : if ismemo (treememo2) then spec (repr (target (treememo2))) else ZERO = if ismemo (treememo2) then match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
IH2 : if ismemo (treememo3) then spec (repr (target (treememo3))) else ZERO = if ismemo (treememo3) then match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
Case1 : nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true
---------------------------------------
if if ismemo (treememo2) then ismemo (treememo3) else false then spec (repr (target (Mnode (nat1) (nat2) (treememo2) (treememo3)))) else ZERO = if if ismemo (treememo2) then ismemo (treememo3) else false then match (Mnode (nat1) (nat2) (treememo2) (treememo3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> case ismemo (treememo2)(rank : 5.)


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : spec (repr (target (treememo2))) = match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1
IH2 : if ismemo (treememo3) then spec (repr (target (treememo3))) else ZERO = if ismemo (treememo3) then match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
Case1 : nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true
Case2 : ismemo (treememo2) = true
---------------------------------------
if ismemo (treememo3) then spec (repr (target (Mnode (nat1) (nat2) (treememo2) (treememo3)))) else ZERO = if ismemo (treememo3) then match (Mnode (nat1) (nat2) (treememo2) (treememo3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case ismemo (treememo3)(rank:6.)
=================================================
Progress: 8


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : spec (repr (target (treememo2))) = match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1
IH2 : if ismemo (treememo3) then spec (repr (target (treememo3))) else ZERO = if ismemo (treememo3) then match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
Case1 : nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true
Case2 : ismemo (treememo2) = true
---------------------------------------
if ismemo (treememo3) then spec (repr (target (Mnode (nat1) (nat2) (treememo2) (treememo3)))) else ZERO = if ismemo (treememo3) then match (Mnode (nat1) (nat2) (treememo2) (treememo3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1 else ZERO

2 goal(s) more...

0 conjecture(s) more...
>>> case ismemo (treememo3)(rank : 6.)


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : spec (repr (target (treememo2))) = match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1
IH2 : spec (repr (target (treememo3))) = match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
Case1 : nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true
Case2 : ismemo (treememo2) = true
Case3 : ismemo (treememo3) = true
---------------------------------------
SUCC (plus (spec (repr (treememo2))) (spec (repr (treememo3)))) = nat1

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1)))
case ismemo (treememo2)
case ismemo (treememo3)
parent
repr (treememo2)
lower
repr(_)
upper
SUCC(plus(spec(_), spec(repr(treememo3))))
remove upper
repr(treememo2)
remove lower
repr(_)
validate generalize_common_subterm_goal
Prop: SUCC (plus (spec (repr (Mnode (ZERO) (SUCC (ZERO)) (Mleaf (SUCC (ZERO))) (Mleaf (ZERO))))) (spec (repr (Mleaf (ZERO))))) = ZERO
Prop: SUCC (plus (spec (repr (Mleaf (ZERO)))) (spec (repr (Mleaf (ZERO))))) = ZERO
Prop: SUCC (plus (spec (repr (Mleaf (ZERO)))) (spec (repr (Mleaf (ZERO))))) = ZERO
Lemma List
forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
End of Lemma List


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : spec (repr (target (treememo2))) = match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1
IH2 : spec (repr (target (treememo3))) = match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
Case1 : nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true
Case2 : ismemo (treememo2) = true
Case3 : ismemo (treememo3) = true
---------------------------------------
SUCC (plus (spec (repr (treememo2))) (spec (repr (treememo3)))) = nat1

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 9


1st goal of : forall (treememo1:treememo), main (treememo1) = mainNew (treememo1)
treememo1 : treememo
nat1 : nat
nat2 : nat
treememo2 : treememo
treememo3 : treememo
IH1 : spec (repr (target (treememo2))) = match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1
IH2 : spec (repr (target (treememo3))) = match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1
Inductive1 : treememo1 = Mnode (nat1) (nat2) (treememo2) (treememo3)
Case1 : nat_eq (nat1) (SUCC (plus (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo3) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true
Case2 : ismemo (treememo2) = true
Case3 : ismemo (treememo3) = true
---------------------------------------
SUCC (plus (spec (repr (treememo2))) (spec (repr (treememo3)))) = nat1

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1

---------------------------------------
forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:13.)
=================================================
Progress: 10


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1

---------------------------------------
forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
---------------------------------------
forall (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction treememo1(rank:14.)
=================================================
Progress: 11


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
---------------------------------------
forall (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> induction treememo1(rank : 14.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
---------------------------------------
forall (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (Mleaf (nat2)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (Mleaf (nat2)) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (Mleaf (nat2)))) (spec (repr (treememo2)))) = nat1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 12


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
---------------------------------------
forall (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (Mleaf (nat2)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (Mleaf (nat2)) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (Mleaf (nat2)))) (spec (repr (treememo2)))) = nat1

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
---------------------------------------
forall (treememo2:treememo), nat_eq (nat1) (SUCC (SUCC (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> true = true -> ismemo (treememo2) = true -> SUCC (SUCC (spec (repr (treememo2)))) = nat1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction treememo2(rank:15.)
=================================================
Progress: 13


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
---------------------------------------
forall (treememo2:treememo), nat_eq (nat1) (SUCC (SUCC (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> true = true -> ismemo (treememo2) = true -> SUCC (SUCC (spec (repr (treememo2)))) = nat1

1 goal(s) more...

1 conjecture(s) more...
>>> induction treememo2(rank : 15.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
---------------------------------------
nat_eq (nat1) (SUCC (SUCC (match (Mleaf (nat3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> true = true -> ismemo (Mleaf (nat3)) = true -> SUCC (SUCC (spec (repr (Mleaf (nat3))))) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 14


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
---------------------------------------
nat_eq (nat1) (SUCC (SUCC (match (Mleaf (nat3)) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> true = true -> ismemo (Mleaf (nat3)) = true -> SUCC (SUCC (spec (repr (Mleaf (nat3))))) = nat1

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
---------------------------------------
nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 15


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
---------------------------------------
nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
---------------------------------------
true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 16


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
---------------------------------------
true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
---------------------------------------
true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 17


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
---------------------------------------
true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
Cond3 : true = true
---------------------------------------
SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (SUCC (ZERO))) = ZERO
Prop: SUCC (SUCC (SUCC (ZERO))) = SUCC (ZERO)
Prop: SUCC (SUCC (SUCC (ZERO))) = ZERO
Lemma List
forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
End of Lemma List


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
Cond3 : true = true
---------------------------------------
SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 18


1st goal of : forall (nat1:nat) (treememo1:treememo) (treememo2:treememo), nat_eq (nat1) (SUCC (plus (match (treememo1) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1) (match (treememo2) with
| Mleaf _ -> SUCC (ZERO)
| Mnode n1 n2 t1 t2 -> n1))) = true -> ismemo (treememo1) = true -> ismemo (treememo2) = true -> SUCC (plus (spec (repr (treememo1))) (spec (repr (treememo2)))) = nat1
nat1 : nat
treememo1 : treememo
nat2 : nat
Base1 : treememo1 = Mleaf (nat2)
treememo2 : treememo
nat3 : nat
Base2 : treememo2 = Mleaf (nat3)
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
Cond3 : true = true
---------------------------------------
SUCC (SUCC (SUCC (ZERO))) = nat1

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1(rank : 0.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

---------------------------------------
forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:15.)
=================================================
Progress: 19


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

---------------------------------------
forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 15.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
---------------------------------------
nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 20


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
---------------------------------------
nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
---------------------------------------
true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 21


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
---------------------------------------
true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
---------------------------------------
true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:15.)
=================================================
Progress: 22


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
---------------------------------------
true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 15.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
Cond3 : true = true
---------------------------------------
SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (SUCC (ZERO))) = ZERO
Prop: SUCC (SUCC (SUCC (ZERO))) = ZERO
Prop: SUCC (SUCC (SUCC (ZERO))) = ZERO
Lemma List
forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
End of Lemma List


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
Cond3 : true = true
---------------------------------------
SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
Cond3 : true = true
---------------------------------------
SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1(rank : 0.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

---------------------------------------
forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:17.)
=================================================
Progress: 24


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

---------------------------------------
forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 17.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
---------------------------------------
nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 25


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
---------------------------------------
nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
---------------------------------------
true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 26


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
---------------------------------------
true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
---------------------------------------
true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:17.)
=================================================
Progress: 27


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
---------------------------------------
true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 17.)


1st goal of : forall (nat1:nat), nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true -> true = true -> true = true -> SUCC (SUCC (SUCC (ZERO))) = nat1
nat1 : nat
Cond1 : nat_eq (nat1) (SUCC (SUCC (SUCC (ZERO)))) = true
Cond2 : true = true
Cond3 : true = true
---------------------------------------
SUCC (SUCC (SUCC (ZERO))) = nat1

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (SUCC (ZERO))) = ZERO
Prop: SUCC (SUCC (SUCC (ZERO))) = SUCC (SUCC (SUCC (ZERO)))
Prop: SUCC (SUCC (SUCC (ZERO))) = ZERO
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
