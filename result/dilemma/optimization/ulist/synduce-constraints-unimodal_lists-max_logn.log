Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:ulist), main (lst) = mainNew (lst)(rank : 0.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)

---------------------------------------
forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)

---------------------------------------
forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)

---------------------------------------
forall (ulist1:ulist), if match (tf1 ((Nil)) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist1))) else ZERO = if match (tf1 ((Nil)) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist1) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction ulist1(rank:5.)
=================================================
Progress: 3


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)

---------------------------------------
forall (ulist1:ulist), if match (tf1 ((Nil)) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist1))) else ZERO = if match (tf1 ((Nil)) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist1) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> induction ulist1(rank : 5.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
Base1 : ulist1 = Unil
---------------------------------------
if match (tf1 ((Nil)) (Unil)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (Unil))) else ZERO = if match (tf1 ((Nil)) (Unil)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (Unil) else ZERO

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 4


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
Base1 : ulist1 = Unil
---------------------------------------
if match (tf1 ((Nil)) (Unil)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (Unil))) else ZERO = if match (tf1 ((Nil)) (Unil)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (Unil) else ZERO

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
nat1 : nat
Base1 : ulist1 = Uelt (nat1)
---------------------------------------
if match (tf1 ((Nil)) (Uelt (nat1))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (Uelt (nat1)))) else ZERO = if match (tf1 ((Nil)) (Uelt (nat1))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (Uelt (nat1)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 5


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
nat1 : nat
Base1 : ulist1 = Uelt (nat1)
---------------------------------------
if match (tf1 ((Nil)) (Uelt (nat1))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (Uelt (nat1)))) else ZERO = if match (tf1 ((Nil)) (Uelt (nat1))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (Uelt (nat1)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
nat1 : nat
Base1 : ulist1 = Uelt (nat1)
---------------------------------------
if gq (nat1) (ZERO) then spec (repr (target (Uelt (nat1)))) else ZERO = if gq (nat1) (ZERO) then targetNew (Uelt (nat1)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (ZERO)(rank:5.)
=================================================
Progress: 6


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
nat1 : nat
Base1 : ulist1 = Uelt (nat1)
---------------------------------------
if gq (nat1) (ZERO) then spec (repr (target (Uelt (nat1)))) else ZERO = if gq (nat1) (ZERO) then targetNew (Uelt (nat1)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (ZERO)(rank : 5.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
nat1 : nat
Base1 : ulist1 = Uelt (nat1)
Case1 : gq (nat1) (ZERO) = true
---------------------------------------
nat1 = nat1

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 7


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
nat1 : nat
Base1 : ulist1 = Uelt (nat1)
Case1 : gq (nat1) (ZERO) = true
---------------------------------------
nat1 = nat1

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
nat1 : nat
Base1 : ulist1 = Uelt (nat1)
Case1 : gq (nat1) (ZERO) = false
---------------------------------------
ZERO = ZERO

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 8


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
nat1 : nat
Base1 : ulist1 = Uelt (nat1)
Case1 : gq (nat1) (ZERO) = false
---------------------------------------
ZERO = ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
---------------------------------------
if match (tf1 ((Nil)) (Usplit (ulist2) (nat1) (nat2) (ulist3))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (Usplit (ulist2) (nat1) (nat2) (ulist3)))) else ZERO = if match (tf1 ((Nil)) (Usplit (ulist2) (nat1) (nat2) (ulist3))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (Usplit (ulist2) (nat1) (nat2) (ulist3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 9


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
---------------------------------------
if match (tf1 ((Nil)) (Usplit (ulist2) (nat1) (nat2) (ulist3))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (Usplit (ulist2) (nat1) (nat2) (ulist3)))) else ZERO = if match (tf1 ((Nil)) (Usplit (ulist2) (nat1) (nat2) (ulist3))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (Usplit (ulist2) (nat1) (nat2) (ulist3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
---------------------------------------
if match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (Usplit (ulist2) (nat1) (nat2) (ulist3)))) else ZERO = if match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (Usplit (ulist2) (nat1) (nat2) (ulist3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl)(rank:4.)
=================================================
Progress: 10


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
---------------------------------------
if match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (Usplit (ulist2) (nat1) (nat2) (ulist3)))) else ZERO = if match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (Usplit (ulist2) (nat1) (nat2) (ulist3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> case match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl)(rank : 4.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
Case1 : match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true
---------------------------------------
spec (tf1 ((Nil)) (if gq (nat1) (nat2) then Usplit (target (ulist2)) (nat1) (nat2) (ulist3) else Usplit (ulist2) (nat1) (nat2) (target (ulist3)))) = if gq (nat1) (nat2) then max (nat1) (targetNew (ulist2)) else if lq (targetNew (ulist3)) (nat2) then nat2 else targetNew (ulist3)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (nat2)(rank:5.)
=================================================
Progress: 11


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
Case1 : match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true
---------------------------------------
spec (tf1 ((Nil)) (if gq (nat1) (nat2) then Usplit (target (ulist2)) (nat1) (nat2) (ulist3) else Usplit (ulist2) (nat1) (nat2) (target (ulist3)))) = if gq (nat1) (nat2) then max (nat1) (targetNew (ulist2)) else if lq (targetNew (ulist3)) (nat2) then nat2 else targetNew (ulist3)

1 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (nat2)(rank : 5.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
Case1 : match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true
Case2 : gq (nat1) (nat2) = true
---------------------------------------
spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (target (ulist2))) = if lq (nat1) (targetNew (ulist2)) then targetNew (ulist2) else nat1

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (nat1) (targetNew (ulist2))(rank:6.)
=================================================
Progress: 12


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
Case1 : match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true
Case2 : gq (nat1) (nat2) = true
---------------------------------------
spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (target (ulist2))) = if lq (nat1) (targetNew (ulist2)) then targetNew (ulist2) else nat1

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (nat1) (targetNew (ulist2))(rank : 6.)


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
Case1 : match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true
Case2 : gq (nat1) (nat2) = true
Case3 : lq (nat1) (targetNew (ulist2)) = true
---------------------------------------
spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (target (ulist2))) = targetNew (ulist2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl)
case gq (nat1) (nat2)
case lq (nat1) (targetNew (ulist2))
parent
(nat1::(nat2::tf1 ((Nil)) (ulist3)))
lower
Cons(_, Cons(nat2, tf1(Nil(), ulist3)))
upper
spec(tf1(_, target(ulist2)))
remove upper
Cons(nat1, Cons(nat2, tf1(Nil(), ulist3)))
remove lower
Cons(nat1, Cons(nat2, tf1(Nil(), ulist3)))
remove upper
Cons(nat1, Cons(nat2, tf1(Nil(), ulist3)))
remove lower
Cons(nat1, Cons(nat2, tf1(Nil(), ulist3)))
remove upper
Cons(nat1, Cons(nat2, tf1(Nil(), ulist3)))
remove lower
Cons(nat1, Cons(nat2, tf1(Nil(), ulist3)))
parent
targetNew (ulist2)
lower
targetNew(_)
upper
_
remove upper
_
validate generalize_common_subterm_goal
Prop: spec (tf1 ((ZERO::(ZERO::tf1 ((Nil)) (Uelt (ZERO))))) (target (Uelt (ZERO)))) = targetNew (Uelt (ZERO))
Prop: spec (tf1 ((ZERO::(ZERO::tf1 ((Nil)) (Usplit (Unil) (SUCC (ZERO)) (ZERO) (Usplit (Unil) (SUCC (ZERO)) (SUCC (ZERO)) (Unil)))))) (target (Unil))) = targetNew (Unil)
Prop: spec (tf1 ((SUCC (ZERO)::(ZERO::tf1 ((Nil)) (Uelt (ZERO))))) (target (Usplit (Uelt (SUCC (SUCC (ZERO)))) (ZERO) (ZERO) (Uelt (ZERO))))) = targetNew (Usplit (Uelt (SUCC (SUCC (ZERO)))) (ZERO) (ZERO) (Uelt (ZERO)))
Lemma List
forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
End of Lemma List


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
Case1 : match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true
Case2 : gq (nat1) (nat2) = true
Case3 : lq (nat1) (targetNew (ulist2)) = true
---------------------------------------
spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (target (ulist2))) = targetNew (ulist2)

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 13


1st goal of : forall (ulist1:ulist), main (ulist1) = mainNew (ulist1)
ulist1 : ulist
ulist2 : ulist
nat1 : nat
nat2 : nat
ulist3 : ulist
IH1 : if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist2))) else ZERO = if match (tf1 ((Nil)) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist2) else ZERO
IH2 : if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then spec (repr (target (ulist3))) else ZERO = if match (tf1 ((Nil)) (ulist3)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) then targetNew (ulist3) else ZERO
Inductive1 : ulist1 = Usplit (ulist2) (nat1) (nat2) (ulist3)
Case1 : match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (ulist2)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true
Case2 : gq (nat1) (nat2) = true
Case3 : lq (nat1) (targetNew (ulist2)) = true
---------------------------------------
spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist3)))) (target (ulist2))) = targetNew (ulist2)

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:13.)
=================================================
Progress: 14


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)

---------------------------------------
forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:13.)
=================================================
Progress: 15


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
---------------------------------------
forall (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction ulist1(rank:15.)
=================================================
Progress: 16


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
---------------------------------------
forall (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction ulist1(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
---------------------------------------
forall (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (Unil)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (Unil)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (Unil))) = targetNew (Unil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 17


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
---------------------------------------
forall (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (Unil)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (Unil)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (Unil))) = targetNew (Unil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
---------------------------------------
forall (ulist2:ulist), if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist2)) else tf3 (nat2) (tf1 ((Nil)) (ulist2)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction ulist2(rank:17.)
=================================================
Progress: 18


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
---------------------------------------
forall (ulist2:ulist), if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist2)) else tf3 (nat2) (tf1 ((Nil)) (ulist2)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> induction ulist2(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
Base2 : ulist2 = Unil
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Unil)) else tf3 (nat2) (tf1 ((Nil)) (Unil)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = ZERO

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17.)
=================================================
Progress: 19


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
Base2 : ulist2 = Unil
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Unil)) else tf3 (nat2) (tf1 ((Nil)) (Unil)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = ZERO

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
Base2 : ulist2 = Unil
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Unil)) else tf3 (nat2) (tf1 ((Nil)) (Unil)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = ZERO

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 20


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
Base2 : ulist2 = Unil
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Unil)) else tf3 (nat2) (tf1 ((Nil)) (Unil)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = ZERO

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Unil)) else tf3 (nat2) (tf1 ((Nil)) (Unil)) else false = true
---------------------------------------
gq (nat1) (nat2) = true->false = true -> if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = ZERO

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 21


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Unil)) else tf3 (nat2) (tf1 ((Nil)) (Unil)) else false = true
---------------------------------------
gq (nat1) (nat2) = true->false = true -> if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = ZERO

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Unil)) else tf3 (nat2) (tf1 ((Nil)) (Unil)) else false = true
Cond2 : gq (nat1) (nat2) = true
---------------------------------------
false = true -> if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = ZERO

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:16.)
=================================================
Progress: 22


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Unil)) else tf3 (nat2) (tf1 ((Nil)) (Unil)) else false = true
Cond2 : gq (nat1) (nat2) = true
---------------------------------------
false = true -> if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = ZERO

4 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
nat3 : nat
Base2 : ulist2 = Uelt (nat3)
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else tf3 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2 else nat1 = ZERO

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:16.)
=================================================
Progress: 23


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
nat3 : nat
Base2 : ulist2 = Uelt (nat3)
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else tf3 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2 else nat1 = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
nat3 : nat
Base2 : ulist2 = Uelt (nat3)
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else tf3 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (nat3) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2 else nat1 = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:16.)
=================================================
Progress: 24


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
nat3 : nat
Base2 : ulist2 = Uelt (nat3)
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else tf3 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (nat3) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2 else nat1 = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
nat3 : nat
Base2 : ulist2 = Uelt (nat3)
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else tf3 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else false = true
---------------------------------------
gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (nat3) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2 else nat1 = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:16.)
=================================================
Progress: 25


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
nat3 : nat
Base2 : ulist2 = Uelt (nat3)
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else tf3 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else false = true
---------------------------------------
gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (nat3) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2 else nat1 = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
nat3 : nat
Base2 : ulist2 = Uelt (nat3)
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else tf3 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else false = true
Cond2 : gq (nat1) (nat2) = true
---------------------------------------
false = true -> if lq (nat1) (if lq (nat2) (nat3) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2 else nat1 = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:15.)
=================================================
Progress: 26


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
nat3 : nat
Base2 : ulist2 = Uelt (nat3)
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else tf3 (nat2) (tf1 ((Nil)) (Uelt (nat3))) else false = true
Cond2 : gq (nat1) (nat2) = true
---------------------------------------
false = true -> if lq (nat1) (if lq (nat2) (nat3) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Uelt (nat3)))) then spec (tf1 ((Nil)) (Uelt (nat3))) else nat2 else nat1 = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
ulist3 : ulist
nat3 : nat
nat4 : nat
ulist4 : ulist
IH1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist3)) else tf3 (nat2) (tf1 ((Nil)) (ulist3)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2 else nat1 = ZERO
IH2 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist4)) else tf3 (nat2) (tf1 ((Nil)) (ulist4)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2 else nat1 = ZERO
Inductive1 : ulist2 = Usplit (ulist3) (nat3) (nat4) (ulist4)
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else tf3 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 27


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
ulist3 : ulist
nat3 : nat
nat4 : nat
ulist4 : ulist
IH1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist3)) else tf3 (nat2) (tf1 ((Nil)) (ulist3)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2 else nat1 = ZERO
IH2 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist4)) else tf3 (nat2) (tf1 ((Nil)) (ulist4)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2 else nat1 = ZERO
Inductive1 : ulist2 = Usplit (ulist3) (nat3) (nat4) (ulist4)
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else tf3 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
ulist3 : ulist
nat3 : nat
nat4 : nat
ulist4 : ulist
IH1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist3)) else tf3 (nat2) (tf1 ((Nil)) (ulist3)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2 else nat1 = ZERO
IH2 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist4)) else tf3 (nat2) (tf1 ((Nil)) (ulist4)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2 else nat1 = ZERO
Inductive1 : ulist2 = Usplit (ulist3) (nat3) (nat4) (ulist4)
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else tf3 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((nat3::(nat4::tf1 ((Nil)) (ulist4)))) (ulist3))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 28


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
ulist3 : ulist
nat3 : nat
nat4 : nat
ulist4 : ulist
IH1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist3)) else tf3 (nat2) (tf1 ((Nil)) (ulist3)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2 else nat1 = ZERO
IH2 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist4)) else tf3 (nat2) (tf1 ((Nil)) (ulist4)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2 else nat1 = ZERO
Inductive1 : ulist2 = Usplit (ulist3) (nat3) (nat4) (ulist4)
---------------------------------------
if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else tf3 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((nat3::(nat4::tf1 ((Nil)) (ulist4)))) (ulist3))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
ulist3 : ulist
nat3 : nat
nat4 : nat
ulist4 : ulist
IH1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist3)) else tf3 (nat2) (tf1 ((Nil)) (ulist3)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2 else nat1 = ZERO
IH2 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist4)) else tf3 (nat2) (tf1 ((Nil)) (ulist4)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2 else nat1 = ZERO
Inductive1 : ulist2 = Usplit (ulist3) (nat3) (nat4) (ulist4)
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else tf3 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else false = true
---------------------------------------
gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((nat3::(nat4::tf1 ((Nil)) (ulist4)))) (ulist3))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 29


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
ulist3 : ulist
nat3 : nat
nat4 : nat
ulist4 : ulist
IH1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist3)) else tf3 (nat2) (tf1 ((Nil)) (ulist3)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2 else nat1 = ZERO
IH2 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist4)) else tf3 (nat2) (tf1 ((Nil)) (ulist4)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2 else nat1 = ZERO
Inductive1 : ulist2 = Usplit (ulist3) (nat3) (nat4) (ulist4)
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else tf3 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else false = true
---------------------------------------
gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((nat3::(nat4::tf1 ((Nil)) (ulist4)))) (ulist3))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
ulist3 : ulist
nat3 : nat
nat4 : nat
ulist4 : ulist
IH1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist3)) else tf3 (nat2) (tf1 ((Nil)) (ulist3)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2 else nat1 = ZERO
IH2 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist4)) else tf3 (nat2) (tf1 ((Nil)) (ulist4)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2 else nat1 = ZERO
Inductive1 : ulist2 = Usplit (ulist3) (nat3) (nat4) (ulist4)
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else tf3 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else false = true
Cond2 : gq (nat1) (nat2) = true
---------------------------------------
false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((nat3::(nat4::tf1 ((Nil)) (ulist4)))) (ulist3))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:14.)
=================================================
Progress: 30


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
Base1 : ulist1 = Unil
ulist2 : ulist
ulist3 : ulist
nat3 : nat
nat4 : nat
ulist4 : ulist
IH1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist3)) else tf3 (nat2) (tf1 ((Nil)) (ulist3)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist3))) then spec (tf1 ((Nil)) (ulist3)) else nat2 else nat1 = ZERO
IH2 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (ulist4)) else tf3 (nat2) (tf1 ((Nil)) (ulist4)) else false = true->gq (nat1) (nat2) = true->false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist4))) then spec (tf1 ((Nil)) (ulist4)) else nat2 else nat1 = ZERO
Inductive1 : ulist2 = Usplit (ulist3) (nat3) (nat4) (ulist4)
Cond1 : if gq (nat1) (ZERO) then if lq (nat1) (nat2) then tf5 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else tf3 (nat2) (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else false = true
Cond2 : gq (nat1) (nat2) = true
---------------------------------------
false = true -> if lq (nat1) (if lq (nat2) (spec (tf1 ((nat3::(nat4::tf1 ((Nil)) (ulist4)))) (ulist3))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4)))) then spec (tf1 ((Nil)) (Usplit (ulist3) (nat3) (nat4) (ulist4))) else nat2 else nat1 = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
---------------------------------------
forall (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (Uelt (nat3))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (Uelt (nat3))) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (Uelt (nat3)))) = targetNew (Uelt (nat3))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 31


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
---------------------------------------
forall (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (Uelt (nat3))) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (Uelt (nat3))) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (Uelt (nat3)))) = targetNew (Uelt (nat3))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
---------------------------------------
forall (ulist2:ulist), if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (ulist2))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (ulist2))) else false = true->gq (nat1) (nat2) = true->lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2 else nat1 else nat3 = nat3

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction ulist2(rank:16.)
=================================================
Progress: 32


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
---------------------------------------
forall (ulist2:ulist), if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (ulist2))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (ulist2))) else false = true->gq (nat1) (nat2) = true->lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (ulist2))) then spec (tf1 ((Nil)) (ulist2)) else nat2 else nat1 else nat3 = nat3

1 goal(s) more...

1 conjecture(s) more...
>>> induction ulist2(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
---------------------------------------
if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true->gq (nat1) (nat2) = true->lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:16.)
=================================================
Progress: 33


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
---------------------------------------
if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true->gq (nat1) (nat2) = true->lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
---------------------------------------
if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true->gq (nat1) (nat2) = true->lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:16.)
=================================================
Progress: 34


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
---------------------------------------
if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true->gq (nat1) (nat2) = true->lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
---------------------------------------
gq (nat1) (nat2) = true->lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:16.)
=================================================
Progress: 35


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
---------------------------------------
gq (nat1) (nat2) = true->lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
---------------------------------------
lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:16.)
=================================================
Progress: 36


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
---------------------------------------
lq (nat1) (nat3) = true -> if lq (nat3) (if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 16.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
---------------------------------------
if lq (nat3) (if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat1) (nat2)(rank:17.)
=================================================
Progress: 37


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
---------------------------------------
if lq (nat3) (if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat1) (nat2)(rank : 17.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
Case1 : lq (nat1) (nat2) = true
---------------------------------------
if lq (nat3) (nat2) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (nat3) (nat2)(rank:18.)
=================================================
Progress: 38


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
Case1 : lq (nat1) (nat2) = true
---------------------------------------
if lq (nat3) (nat2) then if lq (nat1) (if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 else nat3 = nat3

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (nat3) (nat2)(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
Case1 : lq (nat1) (nat2) = true
Case2 : lq (nat3) (nat2) = true
---------------------------------------
if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = nat3

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:18.)
=================================================
Progress: 39


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
Case1 : lq (nat1) (nat2) = true
Case2 : lq (nat3) (nat2) = true
---------------------------------------
if lq (nat1) (nat2) then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = nat3

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
Case1 : lq (nat1) (nat2) = true
Case2 : lq (nat3) (nat2) = true
---------------------------------------
if true then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = nat3

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:18.)
=================================================
Progress: 40


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
Case1 : lq (nat1) (nat2) = true
Case2 : lq (nat3) (nat2) = true
---------------------------------------
if true then if lq (nat2) (spec (tf1 ((Nil)) (Unil))) then spec (tf1 ((Nil)) (Unil)) else nat2 else nat1 = nat3

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 18.)


1st goal of : forall (nat1:nat) (nat2:nat) (ulist1:ulist) (ulist2:ulist), match (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (ulist1)) with
| Nil -> true
| Cons hd tl -> tf5 (hd) (tl) = true->gq (nat1) (nat2) = true->lq (nat1) (targetNew (ulist1)) = true -> spec (tf1 ((nat1::(nat2::tf1 ((Nil)) (ulist2)))) (target (ulist1))) = targetNew (ulist1)
nat1 : nat
nat2 : nat
ulist1 : ulist
nat3 : nat
Base1 : ulist1 = Uelt (nat3)
ulist2 : ulist
Base2 : ulist2 = Unil
Cond1 : if gq (nat3) (ZERO) then if lq (nat3) (nat1) then tf5 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else tf3 (nat1) ((nat2::tf1 ((Nil)) (Unil))) else false = true
Cond2 : gq (nat1) (nat2) = true
Cond3 : lq (nat1) (nat3) = true
Case1 : lq (nat1) (nat2) = true
Case2 : lq (nat3) (nat2) = true
---------------------------------------
nat2 = nat3

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case lq (nat1) (nat2)
case lq (nat3) (nat2)
rewrite Case1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = SUCC (SUCC (ZERO))
Prop: ZERO = ZERO
Prop: SUCC (ZERO) = ZERO
asdf
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
